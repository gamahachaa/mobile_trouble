digraph graphname {
n68197 [shape=box,label="(68197)\nimage.dirty = true\nimage.version ++"];
n68196 [shape=box,label="(68196)"];
n68195 [shape=box,label="(68195)"];
n68194 [shape=box,label="(68194)"];
n68193 [shape=box,label="(68193)"];
n68192 [shape=box,label="(68192)"];
n68191 [shape=box,label="(68191)\nsourcePosition = sourcePosition + 4\ndestPosition = destPosition + 4\nalphaPosition = alphaPosition + 4"];
n68190 [shape=box,label="(68190)"];
n68189 [shape=box,label="(68189)\ncast destData[destPosition] = cast cast cast cast cast cast sourcePixel >>> 8 & 255\nvar tmp = destPosition + 1\ncast destData[tmp] = cast cast cast cast cast cast sourcePixel >>> 16 & 255\nvar tmp = destPosition + 2\ncast destData[tmp] = cast cast cast cast cast cast sourcePixel >>> 24 & 255\nvar tmp = destPosition + 3\ncast destData[tmp] = cast cast cast cast sourcePixel & 255"];
n68188 [shape=box,label="(68188)\ncast destData[destPosition] = cast cast cast cast sourcePixel & 255\nvar tmp = destPosition + 1\ncast destData[tmp] = cast cast cast cast cast cast sourcePixel >>> 24 & 255\nvar tmp = destPosition + 2\ncast destData[tmp] = cast cast cast cast cast cast sourcePixel >>> 16 & 255\nvar tmp = destPosition + 3\ncast destData[tmp] = cast cast cast cast cast cast sourcePixel >>> 8 & 255"];
n68187 [shape=box,label="(68187)\ncast destData[destPosition] = cast cast cast cast cast cast sourcePixel >>> 24 & 255\nvar tmp = destPosition + 1\ncast destData[tmp] = cast cast cast cast cast cast sourcePixel >>> 16 & 255\nvar tmp = destPosition + 2\ncast destData[tmp] = cast cast cast cast cast cast sourcePixel >>> 8 & 255\nvar tmp = destPosition + 3\ncast destData[tmp] = cast cast cast cast sourcePixel & 255"];
n68186 [shape=box,label="(68186)\nvar format = @:exhaustive format\n@:cond-branch format"];
n68186 -> n68187[style="dashed",color="gray",label="case 0"];
n68186 -> n68188[style="dashed",color="gray",label="case 1"];
n68186 -> n68189[style="dashed",color="gray",label="case 2"];
n68186 -> n68190[style="dashed",color="gray",label="next"];
n68185 [shape=box,label="(68185)"];
n68184 [shape=box,label="(68184)"];
n68183 [shape=box,label="(68183)"];
n68182 [shape=box,label="(68182)\nvar r = (cast cast cast cast cast cast sourcePixel >>> 24 & 255) * lime.math._RGBA.RGBA_Impl_.a16\nvar r = r >> 16\nvar g = (cast cast cast cast cast cast sourcePixel >>> 16 & 255) * lime.math._RGBA.RGBA_Impl_.a16\nvar g = g >> 16\nvar b = (cast cast cast cast cast cast sourcePixel >>> 8 & 255) * lime.math._RGBA.RGBA_Impl_.a16\nvar b = b >> 16\nvar sourcePixel = r & 255\nvar sourcePixel = sourcePixel << 24\nvar sourcePixel = g & 255\nvar sourcePixel = sourcePixel << 16\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = b & 255\nvar sourcePixel = sourcePixel << 8\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = cast cast cast cast sourcePixel & 255 & 255\nsourcePixel = sourcePixel | sourcePixel"];
n68181 [shape=box,label="(68181)\nlime.math._RGBA.RGBA_Impl_.a16 = cast cast lime.math._RGBA.RGBA_Impl_.__alpha16[cast cast cast cast sourcePixel & 255]"];
n68181 -> n68182[style="dashed",color="gray",label="sub"];
n68181 -> n68183[style="dashed",color="gray",label="next"];
n68180 [shape=box,label="(68180)"];
n68179 [shape=box,label="(68179)\nsourcePixel = 0"];
n68178 [shape=box,label="(68178)\nvar tmp = (cast cast cast cast sourcePixel & 255) != 255\n@:cond-branch tmp"];
n68178 -> n68181[style="dashed",color="gray",label="then"];
n68178 -> n68184[style="dashed",color="gray",label="next"];
n68177 [shape=box,label="(68177)\nvar tmp = cast cast sourcePixel != 0\n@:cond-branch tmp"];
n68177 -> n68179[style="dashed",color="gray",label="then"];
n68177 -> n68180[style="dashed",color="gray",label="next"];
n68176 [shape=box,label="(68176)\nvar tmp = (cast cast cast cast sourcePixel & 255) == 0\n@:cond-branch tmp"];
n68176 -> n68177[style="dashed",color="gray",label="then"];
n68176 -> n68178[style="dashed",color="gray",label="else"];
n68176 -> n68185[style="dashed",color="gray",label="next"];
n68175 [shape=box,label="(68175)\nvar premultiplied = premultiplied\n@:cond-branch premultiplied"];
n68175 -> n68176[style="dashed",color="gray",label="then"];
n68175 -> n68186[style="dashed",color="gray",label="next"];
n68174 [shape=box,label="(68174)\nformat = 0"];
n68173 [shape=box,label="(68173)\nvar tmp = format == null\n@:cond-branch tmp"];
n68173 -> n68174[style="dashed",color="gray",label="then"];
n68173 -> n68175[style="dashed",color="gray",label="next"];
n68172 [shape=box,label="(68172)\npremultiplied = false"];
n68171 [shape=box,label="(68171)\nvar format = destFormat\nvar premultiplied = destPremultiplied\nvar tmp = premultiplied == null\n@:cond-branch tmp"];
n68171 -> n68172[style="dashed",color="gray",label="then"];
n68171 -> n68173[style="dashed",color="gray",label="next"];
n68170 [shape=box,label="(68170)"];
n68170 -> n68171[style="dashed",color="gray",label="sub"];
n68170 -> n68191[style="dashed",color="gray",label="next"];
n68169 [shape=box,label="(68169)\nvar value = (cast cast cast cast alphaPixel & 255) / 255\nvar value = (cast cast cast cast sourcePixel & 255) * value\nvar value = Math.round(value)\nvar sourcePixel = cast cast cast cast cast cast sourcePixel >>> 24 & 255 & 255\nvar sourcePixel = sourcePixel << 24\nvar sourcePixel = cast cast cast cast cast cast sourcePixel >>> 16 & 255 & 255\nvar sourcePixel = sourcePixel << 16\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = cast cast cast cast cast cast sourcePixel >>> 8 & 255 & 255\nvar sourcePixel = sourcePixel << 8\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = value & 255\nsourcePixel = sourcePixel | sourcePixel"];
n68168 [shape=box,label="(68168)"];
n68168 -> n68169[style="dashed",color="gray",label="sub"];
n68168 -> n68170[style="dashed",color="gray",label="next"];
n68167 [shape=box,label="(68167)"];
n68166 [shape=box,label="(68166)"];
n68165 [shape=box,label="(68165)"];
n68164 [shape=box,label="(68164)\nvar r = cast lime.math._RGBA.RGBA_Impl_.__clamp\nvar r = (cast cast cast cast cast cast alphaPixel >>> 24 & 255) * lime.math._RGBA.RGBA_Impl_.unmult\nvar r = Math.round(r)\nvar r = cast r[r]\nvar g = cast lime.math._RGBA.RGBA_Impl_.__clamp\nvar g = (cast cast cast cast cast cast alphaPixel >>> 16 & 255) * lime.math._RGBA.RGBA_Impl_.unmult\nvar g = Math.round(g)\nvar g = cast g[g]\nvar b = cast lime.math._RGBA.RGBA_Impl_.__clamp\nvar b = (cast cast cast cast cast cast alphaPixel >>> 8 & 255) * lime.math._RGBA.RGBA_Impl_.unmult\nvar b = Math.round(b)\nvar b = cast b[b]\nvar alphaPixel = r & 255\nvar alphaPixel = alphaPixel << 24\nvar alphaPixel = g & 255\nvar alphaPixel = alphaPixel << 16\nvar alphaPixel = alphaPixel | alphaPixel\nvar alphaPixel = b & 255\nvar alphaPixel = alphaPixel << 8\nvar alphaPixel = alphaPixel | alphaPixel\nvar alphaPixel = cast cast cast cast alphaPixel & 255 & 255\nalphaPixel = alphaPixel | alphaPixel"];
n68163 [shape=box,label="(68163)\nlime.math._RGBA.RGBA_Impl_.unmult = 255.0 / (cast cast cast cast alphaPixel & 255)"];
n68163 -> n68164[style="dashed",color="gray",label="sub"];
n68163 -> n68165[style="dashed",color="gray",label="next"];
n68162 [shape=box,label="(68162)\n@:cond-branch tmp"];
n68162 -> n68163[style="dashed",color="gray",label="then"];
n68162 -> n68166[style="dashed",color="gray",label="next"];
n68161 [shape=box,label="(68161)\ntmp = false"];
n68160 [shape=box,label="(68160)\ntmp = (cast cast cast cast alphaPixel & 255) != 255"];
n68159 [shape=box,label="(68159)\nvar tmp\nvar tmp = (cast cast cast cast alphaPixel & 255) != 0\n@:cond-branch tmp"];
n68159 -> n68160[style="dashed",color="gray",label="then"];
n68159 -> n68161[style="dashed",color="gray",label="else"];
n68159 -> n68162[style="dashed",color="gray",label="next"];
n68158 [shape=box,label="(68158)\nvar premultiplied = premultiplied\n@:cond-branch premultiplied"];
n68158 -> n68159[style="dashed",color="gray",label="then"];
n68158 -> n68167[style="dashed",color="gray",label="next"];
n68157 [shape=box,label="(68157)\nvar alphaPixel = alphaPosition + 2\nvar alphaPixel = cast cast alphaData[alphaPixel] & 255\nvar alphaPixel = alphaPixel << 24\nvar alphaPixel = alphaPosition + 1\nvar alphaPixel = cast cast alphaData[alphaPixel] & 255\nvar alphaPixel = alphaPixel << 16\nvar alphaPixel = alphaPixel | alphaPixel\nvar alphaPixel = cast cast alphaData[alphaPosition] & 255\nvar alphaPixel = alphaPixel << 8\nvar alphaPixel = alphaPixel | alphaPixel\nvar alphaPixel = alphaPosition + 3\nvar alphaPixel = cast cast alphaData[alphaPixel] & 255\nalphaPixel = alphaPixel | alphaPixel"];
n68156 [shape=box,label="(68156)\nvar alphaPixel = alphaPosition + 1\nvar alphaPixel = cast cast alphaData[alphaPixel] & 255\nvar alphaPixel = alphaPixel << 24\nvar alphaPixel = alphaPosition + 2\nvar alphaPixel = cast cast alphaData[alphaPixel] & 255\nvar alphaPixel = alphaPixel << 16\nvar alphaPixel = alphaPixel | alphaPixel\nvar alphaPixel = alphaPosition + 3\nvar alphaPixel = cast cast alphaData[alphaPixel] & 255\nvar alphaPixel = alphaPixel << 8\nvar alphaPixel = alphaPixel | alphaPixel\nvar alphaPixel = cast cast alphaData[alphaPosition] & 255\nalphaPixel = alphaPixel | alphaPixel"];
n68155 [shape=box,label="(68155)\nvar alphaPixel = cast cast alphaData[alphaPosition] & 255\nvar alphaPixel = alphaPixel << 24\nvar alphaPixel = alphaPosition + 1\nvar alphaPixel = cast cast alphaData[alphaPixel] & 255\nvar alphaPixel = alphaPixel << 16\nvar alphaPixel = alphaPixel | alphaPixel\nvar alphaPixel = alphaPosition + 2\nvar alphaPixel = cast cast alphaData[alphaPixel] & 255\nvar alphaPixel = alphaPixel << 8\nvar alphaPixel = alphaPixel | alphaPixel\nvar alphaPixel = alphaPosition + 3\nvar alphaPixel = cast cast alphaData[alphaPixel] & 255\nalphaPixel = alphaPixel | alphaPixel"];
n68154 [shape=box,label="(68154)\nvar format = @:exhaustive format\n@:cond-branch format"];
n68154 -> n68155[style="dashed",color="gray",label="case 0"];
n68154 -> n68156[style="dashed",color="gray",label="case 1"];
n68154 -> n68157[style="dashed",color="gray",label="case 2"];
n68154 -> n68158[style="dashed",color="gray",label="next"];
n68153 [shape=box,label="(68153)\nformat = 0"];
n68152 [shape=box,label="(68152)\nvar tmp = format == null\n@:cond-branch tmp"];
n68152 -> n68153[style="dashed",color="gray",label="then"];
n68152 -> n68154[style="dashed",color="gray",label="next"];
n68151 [shape=box,label="(68151)\npremultiplied = false"];
n68150 [shape=box,label="(68150)\nvar format = alphaFormat\nvar premultiplied = false\nvar tmp = premultiplied == null\n@:cond-branch tmp"];
n68150 -> n68151[style="dashed",color="gray",label="then"];
n68150 -> n68152[style="dashed",color="gray",label="next"];
n68149 [shape=box,label="(68149)"];
n68149 -> n68150[style="dashed",color="gray",label="sub"];
n68149 -> n68168[style="dashed",color="gray",label="next"];
n68148 [shape=box,label="(68148)"];
n68147 [shape=box,label="(68147)"];
n68146 [shape=box,label="(68146)"];
n68145 [shape=box,label="(68145)\nvar r = cast lime.math._RGBA.RGBA_Impl_.__clamp\nvar r = (cast cast cast cast cast cast sourcePixel >>> 24 & 255) * lime.math._RGBA.RGBA_Impl_.unmult\nvar r = Math.round(r)\nvar r = cast r[r]\nvar g = cast lime.math._RGBA.RGBA_Impl_.__clamp\nvar g = (cast cast cast cast cast cast sourcePixel >>> 16 & 255) * lime.math._RGBA.RGBA_Impl_.unmult\nvar g = Math.round(g)\nvar g = cast g[g]\nvar b = cast lime.math._RGBA.RGBA_Impl_.__clamp\nvar b = (cast cast cast cast cast cast sourcePixel >>> 8 & 255) * lime.math._RGBA.RGBA_Impl_.unmult\nvar b = Math.round(b)\nvar b = cast b[b]\nvar sourcePixel = r & 255\nvar sourcePixel = sourcePixel << 24\nvar sourcePixel = g & 255\nvar sourcePixel = sourcePixel << 16\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = b & 255\nvar sourcePixel = sourcePixel << 8\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = cast cast cast cast sourcePixel & 255 & 255\nsourcePixel = sourcePixel | sourcePixel"];
n68144 [shape=box,label="(68144)\nlime.math._RGBA.RGBA_Impl_.unmult = 255.0 / (cast cast cast cast sourcePixel & 255)"];
n68144 -> n68145[style="dashed",color="gray",label="sub"];
n68144 -> n68146[style="dashed",color="gray",label="next"];
n68143 [shape=box,label="(68143)\n@:cond-branch tmp"];
n68143 -> n68144[style="dashed",color="gray",label="then"];
n68143 -> n68147[style="dashed",color="gray",label="next"];
n68142 [shape=box,label="(68142)\ntmp = false"];
n68141 [shape=box,label="(68141)\ntmp = (cast cast cast cast sourcePixel & 255) != 255"];
n68140 [shape=box,label="(68140)\nvar tmp\nvar tmp = (cast cast cast cast sourcePixel & 255) != 0\n@:cond-branch tmp"];
n68140 -> n68141[style="dashed",color="gray",label="then"];
n68140 -> n68142[style="dashed",color="gray",label="else"];
n68140 -> n68143[style="dashed",color="gray",label="next"];
n68139 [shape=box,label="(68139)\nvar premultiplied = premultiplied\n@:cond-branch premultiplied"];
n68139 -> n68140[style="dashed",color="gray",label="then"];
n68139 -> n68148[style="dashed",color="gray",label="next"];
n68138 [shape=box,label="(68138)\nvar sourcePixel = sourcePosition + 2\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nvar sourcePixel = sourcePixel << 24\nvar sourcePixel = sourcePosition + 1\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nvar sourcePixel = sourcePixel << 16\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = cast cast sourceData[sourcePosition] & 255\nvar sourcePixel = sourcePixel << 8\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = sourcePosition + 3\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nsourcePixel = sourcePixel | sourcePixel"];
n68137 [shape=box,label="(68137)\nvar sourcePixel = sourcePosition + 1\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nvar sourcePixel = sourcePixel << 24\nvar sourcePixel = sourcePosition + 2\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nvar sourcePixel = sourcePixel << 16\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = sourcePosition + 3\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nvar sourcePixel = sourcePixel << 8\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = cast cast sourceData[sourcePosition] & 255\nsourcePixel = sourcePixel | sourcePixel"];
n68136 [shape=box,label="(68136)\nvar sourcePixel = cast cast sourceData[sourcePosition] & 255\nvar sourcePixel = sourcePixel << 24\nvar sourcePixel = sourcePosition + 1\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nvar sourcePixel = sourcePixel << 16\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = sourcePosition + 2\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nvar sourcePixel = sourcePixel << 8\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = sourcePosition + 3\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nsourcePixel = sourcePixel | sourcePixel"];
n68135 [shape=box,label="(68135)\nvar format = @:exhaustive format\n@:cond-branch format"];
n68135 -> n68136[style="dashed",color="gray",label="case 0"];
n68135 -> n68137[style="dashed",color="gray",label="case 1"];
n68135 -> n68138[style="dashed",color="gray",label="case 2"];
n68135 -> n68139[style="dashed",color="gray",label="next"];
n68134 [shape=box,label="(68134)\nformat = 0"];
n68133 [shape=box,label="(68133)\nvar tmp = format == null\n@:cond-branch tmp"];
n68133 -> n68134[style="dashed",color="gray",label="then"];
n68133 -> n68135[style="dashed",color="gray",label="next"];
n68132 [shape=box,label="(68132)\npremultiplied = false"];
n68131 [shape=box,label="(68131)\nvar format = sourceFormat\nvar premultiplied = sourcePremultiplied\nvar tmp = premultiplied == null\n@:cond-branch tmp"];
n68131 -> n68132[style="dashed",color="gray",label="then"];
n68131 -> n68133[style="dashed",color="gray",label="next"];
n68130 [shape=box,label="(68130)\n` = ` + 1\nvar x = ` - 1"];
n68130 -> n68131[style="dashed",color="gray",label="sub"];
n68130 -> n68149[style="dashed",color="gray",label="next"];
n68129 [shape=box,label="(68129)\nbreak"];
n68128 [shape=box,label="(68128)\nvar tmp = ! ((` < `1))\n@:cond-branch tmp"];
n68128 -> n68129[style="dashed",color="gray",label="then"];
n68128 -> n68130[style="dashed",color="gray",label="next"];
n68127 [shape=box,label="<loop-head>
(68127)"];
n68126 [shape=box,label="(68126)\nwhile ((true)) @:block 68128"];
n68126 -> n68127[style="dashed",color="gray",label="loop-head"];
n68126 -> n68128[style="dashed",color="gray",label="loop-body"];
n68126 -> n68192[style="dashed",color="gray",label="next"];
n68125 [shape=box,label="(68125)\nvar ` = 0\nvar `1 = destView.width"];
n68125 -> n68126[style="dashed",color="gray",label="merge"];
n68124 [shape=box,label="(68124)\n` = ` + 1\nvar y = ` - 1\nvar sourceView = sourceView.byteOffset\nvar sourcePosition = sourceView.stride * y\nsourcePosition = sourceView + sourcePosition\nvar destView = destView.byteOffset\nvar destPosition = destView.stride * y\ndestPosition = destView + destPosition\nvar alphaView = alphaView.byteOffset\nvar alphaPosition = alphaView.stride * y\nalphaPosition = alphaView + alphaPosition"];
n68124 -> n68125[style="dashed",color="gray",label="sub"];
n68124 -> n68193[style="dashed",color="gray",label="next"];
n68123 [shape=box,label="(68123)\nbreak"];
n68122 [shape=box,label="(68122)\nvar tmp = ! ((` < `1))\n@:cond-branch tmp"];
n68122 -> n68123[style="dashed",color="gray",label="then"];
n68122 -> n68124[style="dashed",color="gray",label="next"];
n68121 [shape=box,label="<loop-head>
(68121)"];
n68120 [shape=box,label="(68120)\nwhile ((true)) @:block 68122"];
n68120 -> n68121[style="dashed",color="gray",label="loop-head"];
n68120 -> n68122[style="dashed",color="gray",label="loop-body"];
n68120 -> n68194[style="dashed",color="gray",label="next"];
n68119 [shape=box,label="(68119)"];
n68118 [shape=box,label="(68118)"];
n68117 [shape=box,label="(68117)"];
n68116 [shape=box,label="(68116)\nsourcePosition = sourcePosition + 4\ndestPosition = destPosition + 4\nalphaPosition = alphaPosition + 4"];
n68115 [shape=box,label="(68115)"];
n68114 [shape=box,label="(68114)"];
n68113 [shape=box,label="(68113)\ncast destData[destPosition] = cast cast cast cast cast cast destPixel >>> 8 & 255\nvar tmp = destPosition + 1\ncast destData[tmp] = cast cast cast cast cast cast destPixel >>> 16 & 255\nvar tmp = destPosition + 2\ncast destData[tmp] = cast cast cast cast cast cast destPixel >>> 24 & 255\nvar tmp = destPosition + 3\ncast destData[tmp] = cast cast cast cast destPixel & 255"];
n68112 [shape=box,label="(68112)\ncast destData[destPosition] = cast cast cast cast destPixel & 255\nvar tmp = destPosition + 1\ncast destData[tmp] = cast cast cast cast cast cast destPixel >>> 24 & 255\nvar tmp = destPosition + 2\ncast destData[tmp] = cast cast cast cast cast cast destPixel >>> 16 & 255\nvar tmp = destPosition + 3\ncast destData[tmp] = cast cast cast cast cast cast destPixel >>> 8 & 255"];
n68111 [shape=box,label="(68111)\ncast destData[destPosition] = cast cast cast cast cast cast destPixel >>> 24 & 255\nvar tmp = destPosition + 1\ncast destData[tmp] = cast cast cast cast cast cast destPixel >>> 16 & 255\nvar tmp = destPosition + 2\ncast destData[tmp] = cast cast cast cast cast cast destPixel >>> 8 & 255\nvar tmp = destPosition + 3\ncast destData[tmp] = cast cast cast cast destPixel & 255"];
n68110 [shape=box,label="(68110)\nvar format = @:exhaustive format\n@:cond-branch format"];
n68110 -> n68111[style="dashed",color="gray",label="case 0"];
n68110 -> n68112[style="dashed",color="gray",label="case 1"];
n68110 -> n68113[style="dashed",color="gray",label="case 2"];
n68110 -> n68114[style="dashed",color="gray",label="next"];
n68109 [shape=box,label="(68109)"];
n68108 [shape=box,label="(68108)"];
n68107 [shape=box,label="(68107)"];
n68106 [shape=box,label="(68106)\nvar r = (cast cast cast cast cast cast destPixel >>> 24 & 255) * lime.math._RGBA.RGBA_Impl_.a16\nvar r = r >> 16\nvar g = (cast cast cast cast cast cast destPixel >>> 16 & 255) * lime.math._RGBA.RGBA_Impl_.a16\nvar g = g >> 16\nvar b = (cast cast cast cast cast cast destPixel >>> 8 & 255) * lime.math._RGBA.RGBA_Impl_.a16\nvar b = b >> 16\nvar destPixel = r & 255\nvar destPixel = destPixel << 24\nvar destPixel = g & 255\nvar destPixel = destPixel << 16\nvar destPixel = destPixel | destPixel\nvar destPixel = b & 255\nvar destPixel = destPixel << 8\nvar destPixel = destPixel | destPixel\nvar destPixel = cast cast cast cast destPixel & 255 & 255\ndestPixel = destPixel | destPixel"];
n68105 [shape=box,label="(68105)\nlime.math._RGBA.RGBA_Impl_.a16 = cast cast lime.math._RGBA.RGBA_Impl_.__alpha16[cast cast cast cast destPixel & 255]"];
n68105 -> n68106[style="dashed",color="gray",label="sub"];
n68105 -> n68107[style="dashed",color="gray",label="next"];
n68104 [shape=box,label="(68104)"];
n68103 [shape=box,label="(68103)\ndestPixel = 0"];
n68102 [shape=box,label="(68102)\nvar tmp = (cast cast cast cast destPixel & 255) != 255\n@:cond-branch tmp"];
n68102 -> n68105[style="dashed",color="gray",label="then"];
n68102 -> n68108[style="dashed",color="gray",label="next"];
n68101 [shape=box,label="(68101)\nvar tmp = cast cast destPixel != 0\n@:cond-branch tmp"];
n68101 -> n68103[style="dashed",color="gray",label="then"];
n68101 -> n68104[style="dashed",color="gray",label="next"];
n68100 [shape=box,label="(68100)\nvar tmp = (cast cast cast cast destPixel & 255) == 0\n@:cond-branch tmp"];
n68100 -> n68101[style="dashed",color="gray",label="then"];
n68100 -> n68102[style="dashed",color="gray",label="else"];
n68100 -> n68109[style="dashed",color="gray",label="next"];
n68099 [shape=box,label="(68099)\nvar premultiplied = premultiplied\n@:cond-branch premultiplied"];
n68099 -> n68100[style="dashed",color="gray",label="then"];
n68099 -> n68110[style="dashed",color="gray",label="next"];
n68098 [shape=box,label="(68098)\nformat = 0"];
n68097 [shape=box,label="(68097)\nvar tmp = format == null\n@:cond-branch tmp"];
n68097 -> n68098[style="dashed",color="gray",label="then"];
n68097 -> n68099[style="dashed",color="gray",label="next"];
n68096 [shape=box,label="(68096)\npremultiplied = false"];
n68095 [shape=box,label="(68095)\nvar format = destFormat\nvar premultiplied = destPremultiplied\nvar tmp = premultiplied == null\n@:cond-branch tmp"];
n68095 -> n68096[style="dashed",color="gray",label="then"];
n68095 -> n68097[style="dashed",color="gray",label="next"];
n68094 [shape=box,label="(68094)"];
n68094 -> n68095[style="dashed",color="gray",label="sub"];
n68094 -> n68115[style="dashed",color="gray",label="next"];
n68093 [shape=box,label="(68093)\nvar value = cast lime.math._RGBA.RGBA_Impl_.__clamp\nvar value = blendAlpha * 255.0\nvar value = Math.round(value)\nvar value = cast value[value]\nvar destPixel = cast cast cast cast cast cast destPixel >>> 24 & 255 & 255\nvar destPixel = destPixel << 24\nvar destPixel = cast cast cast cast cast cast destPixel >>> 16 & 255 & 255\nvar destPixel = destPixel << 16\nvar destPixel = destPixel | destPixel\nvar destPixel = cast cast cast cast cast cast destPixel >>> 8 & 255 & 255\nvar destPixel = destPixel << 8\nvar destPixel = destPixel | destPixel\nvar destPixel = value & 255\ndestPixel = destPixel | destPixel"];
n68092 [shape=box,label="(68092)"];
n68092 -> n68093[style="dashed",color="gray",label="sub"];
n68092 -> n68094[style="dashed",color="gray",label="next"];
n68091 [shape=box,label="(68091)\nvar value = cast lime.math._RGBA.RGBA_Impl_.__clamp\nvar value = (cast cast cast cast cast cast sourcePixel >>> 8 & 255) * sourceAlpha\nvar value = (cast cast cast cast cast cast destPixel >>> 8 & 255) * destAlpha\nvar value = value * oneMinusSourceAlpha\nvar value = value + value\nvar value = value / blendAlpha\nvar value = Math.round(value)\nvar value = cast value[value]\nvar destPixel = cast cast cast cast cast cast destPixel >>> 24 & 255 & 255\nvar destPixel = destPixel << 24\nvar destPixel = cast cast cast cast cast cast destPixel >>> 16 & 255 & 255\nvar destPixel = destPixel << 16\nvar destPixel = destPixel | destPixel\nvar destPixel = value & 255\nvar destPixel = destPixel << 8\nvar destPixel = destPixel | destPixel\nvar destPixel = cast cast cast cast destPixel & 255 & 255\ndestPixel = destPixel | destPixel"];
n68090 [shape=box,label="(68090)"];
n68090 -> n68091[style="dashed",color="gray",label="sub"];
n68090 -> n68092[style="dashed",color="gray",label="next"];
n68089 [shape=box,label="(68089)\nvar value = cast lime.math._RGBA.RGBA_Impl_.__clamp\nvar value = (cast cast cast cast cast cast sourcePixel >>> 16 & 255) * sourceAlpha\nvar value = (cast cast cast cast cast cast destPixel >>> 16 & 255) * destAlpha\nvar value = value * oneMinusSourceAlpha\nvar value = value + value\nvar value = value / blendAlpha\nvar value = Math.round(value)\nvar value = cast value[value]\nvar destPixel = cast cast cast cast cast cast destPixel >>> 24 & 255 & 255\nvar destPixel = destPixel << 24\nvar destPixel = value & 255\nvar destPixel = destPixel << 16\nvar destPixel = destPixel | destPixel\nvar destPixel = cast cast cast cast cast cast destPixel >>> 8 & 255 & 255\nvar destPixel = destPixel << 8\nvar destPixel = destPixel | destPixel\nvar destPixel = cast cast cast cast destPixel & 255 & 255\ndestPixel = destPixel | destPixel"];
n68088 [shape=box,label="(68088)"];
n68088 -> n68089[style="dashed",color="gray",label="sub"];
n68088 -> n68090[style="dashed",color="gray",label="next"];
n68087 [shape=box,label="(68087)\nvar value = cast lime.math._RGBA.RGBA_Impl_.__clamp\nvar value = (cast cast cast cast cast cast sourcePixel >>> 24 & 255) * sourceAlpha\nvar value = (cast cast cast cast cast cast destPixel >>> 24 & 255) * destAlpha\nvar value = value * oneMinusSourceAlpha\nvar value = value + value\nvar value = value / blendAlpha\nvar value = Math.round(value)\nvar value = cast value[value]\nvar destPixel = value & 255\nvar destPixel = destPixel << 24\nvar destPixel = cast cast cast cast cast cast destPixel >>> 16 & 255 & 255\nvar destPixel = destPixel << 16\nvar destPixel = destPixel | destPixel\nvar destPixel = cast cast cast cast cast cast destPixel >>> 8 & 255 & 255\nvar destPixel = destPixel << 8\nvar destPixel = destPixel | destPixel\nvar destPixel = cast cast cast cast destPixel & 255 & 255\ndestPixel = destPixel | destPixel"];
n68086 [shape=box,label="(68086)\ndestAlpha = (cast cast cast cast destPixel & 255) / 255.0\noneMinusSourceAlpha = 1 - sourceAlpha\nvar blendAlpha = destAlpha * oneMinusSourceAlpha\nblendAlpha = sourceAlpha + blendAlpha"];
n68086 -> n68087[style="dashed",color="gray",label="sub"];
n68086 -> n68088[style="dashed",color="gray",label="next"];
n68085 [shape=box,label="(68085)\nvar sourceAlpha = (cast cast cast cast alphaPixel & 255) / 255.0\nvar sourceAlpha = (cast cast cast cast sourcePixel & 255) / 255.0\nsourceAlpha = sourceAlpha * sourceAlpha\nvar tmp = sourceAlpha > 0\n@:cond-branch tmp"];
n68085 -> n68086[style="dashed",color="gray",label="then"];
n68085 -> n68116[style="dashed",color="gray",label="next"];
n68084 [shape=box,label="(68084)"];
n68083 [shape=box,label="(68083)"];
n68082 [shape=box,label="(68082)"];
n68081 [shape=box,label="(68081)\nvar r = cast lime.math._RGBA.RGBA_Impl_.__clamp\nvar r = (cast cast cast cast cast cast alphaPixel >>> 24 & 255) * lime.math._RGBA.RGBA_Impl_.unmult\nvar r = Math.round(r)\nvar r = cast r[r]\nvar g = cast lime.math._RGBA.RGBA_Impl_.__clamp\nvar g = (cast cast cast cast cast cast alphaPixel >>> 16 & 255) * lime.math._RGBA.RGBA_Impl_.unmult\nvar g = Math.round(g)\nvar g = cast g[g]\nvar b = cast lime.math._RGBA.RGBA_Impl_.__clamp\nvar b = (cast cast cast cast cast cast alphaPixel >>> 8 & 255) * lime.math._RGBA.RGBA_Impl_.unmult\nvar b = Math.round(b)\nvar b = cast b[b]\nvar alphaPixel = r & 255\nvar alphaPixel = alphaPixel << 24\nvar alphaPixel = g & 255\nvar alphaPixel = alphaPixel << 16\nvar alphaPixel = alphaPixel | alphaPixel\nvar alphaPixel = b & 255\nvar alphaPixel = alphaPixel << 8\nvar alphaPixel = alphaPixel | alphaPixel\nvar alphaPixel = cast cast cast cast alphaPixel & 255 & 255\nalphaPixel = alphaPixel | alphaPixel"];
n68080 [shape=box,label="(68080)\nlime.math._RGBA.RGBA_Impl_.unmult = 255.0 / (cast cast cast cast alphaPixel & 255)"];
n68080 -> n68081[style="dashed",color="gray",label="sub"];
n68080 -> n68082[style="dashed",color="gray",label="next"];
n68079 [shape=box,label="(68079)\n@:cond-branch tmp"];
n68079 -> n68080[style="dashed",color="gray",label="then"];
n68079 -> n68083[style="dashed",color="gray",label="next"];
n68078 [shape=box,label="(68078)\ntmp = false"];
n68077 [shape=box,label="(68077)\ntmp = (cast cast cast cast alphaPixel & 255) != 255"];
n68076 [shape=box,label="(68076)\nvar tmp\nvar tmp = (cast cast cast cast alphaPixel & 255) != 0\n@:cond-branch tmp"];
n68076 -> n68077[style="dashed",color="gray",label="then"];
n68076 -> n68078[style="dashed",color="gray",label="else"];
n68076 -> n68079[style="dashed",color="gray",label="next"];
n68075 [shape=box,label="(68075)\nvar premultiplied = premultiplied\n@:cond-branch premultiplied"];
n68075 -> n68076[style="dashed",color="gray",label="then"];
n68075 -> n68084[style="dashed",color="gray",label="next"];
n68074 [shape=box,label="(68074)\nvar alphaPixel = alphaPosition + 2\nvar alphaPixel = cast cast alphaData[alphaPixel] & 255\nvar alphaPixel = alphaPixel << 24\nvar alphaPixel = alphaPosition + 1\nvar alphaPixel = cast cast alphaData[alphaPixel] & 255\nvar alphaPixel = alphaPixel << 16\nvar alphaPixel = alphaPixel | alphaPixel\nvar alphaPixel = cast cast alphaData[alphaPosition] & 255\nvar alphaPixel = alphaPixel << 8\nvar alphaPixel = alphaPixel | alphaPixel\nvar alphaPixel = alphaPosition + 3\nvar alphaPixel = cast cast alphaData[alphaPixel] & 255\nalphaPixel = alphaPixel | alphaPixel"];
n68073 [shape=box,label="(68073)\nvar alphaPixel = alphaPosition + 1\nvar alphaPixel = cast cast alphaData[alphaPixel] & 255\nvar alphaPixel = alphaPixel << 24\nvar alphaPixel = alphaPosition + 2\nvar alphaPixel = cast cast alphaData[alphaPixel] & 255\nvar alphaPixel = alphaPixel << 16\nvar alphaPixel = alphaPixel | alphaPixel\nvar alphaPixel = alphaPosition + 3\nvar alphaPixel = cast cast alphaData[alphaPixel] & 255\nvar alphaPixel = alphaPixel << 8\nvar alphaPixel = alphaPixel | alphaPixel\nvar alphaPixel = cast cast alphaData[alphaPosition] & 255\nalphaPixel = alphaPixel | alphaPixel"];
n68072 [shape=box,label="(68072)\nvar alphaPixel = cast cast alphaData[alphaPosition] & 255\nvar alphaPixel = alphaPixel << 24\nvar alphaPixel = alphaPosition + 1\nvar alphaPixel = cast cast alphaData[alphaPixel] & 255\nvar alphaPixel = alphaPixel << 16\nvar alphaPixel = alphaPixel | alphaPixel\nvar alphaPixel = alphaPosition + 2\nvar alphaPixel = cast cast alphaData[alphaPixel] & 255\nvar alphaPixel = alphaPixel << 8\nvar alphaPixel = alphaPixel | alphaPixel\nvar alphaPixel = alphaPosition + 3\nvar alphaPixel = cast cast alphaData[alphaPixel] & 255\nalphaPixel = alphaPixel | alphaPixel"];
n68071 [shape=box,label="(68071)\nvar format = @:exhaustive format\n@:cond-branch format"];
n68071 -> n68072[style="dashed",color="gray",label="case 0"];
n68071 -> n68073[style="dashed",color="gray",label="case 1"];
n68071 -> n68074[style="dashed",color="gray",label="case 2"];
n68071 -> n68075[style="dashed",color="gray",label="next"];
n68070 [shape=box,label="(68070)\nformat = 0"];
n68069 [shape=box,label="(68069)\nvar tmp = format == null\n@:cond-branch tmp"];
n68069 -> n68070[style="dashed",color="gray",label="then"];
n68069 -> n68071[style="dashed",color="gray",label="next"];
n68068 [shape=box,label="(68068)\npremultiplied = false"];
n68067 [shape=box,label="(68067)\nvar format = alphaFormat\nvar premultiplied = false\nvar tmp = premultiplied == null\n@:cond-branch tmp"];
n68067 -> n68068[style="dashed",color="gray",label="then"];
n68067 -> n68069[style="dashed",color="gray",label="next"];
n68066 [shape=box,label="(68066)"];
n68066 -> n68067[style="dashed",color="gray",label="sub"];
n68066 -> n68085[style="dashed",color="gray",label="next"];
n68065 [shape=box,label="(68065)"];
n68064 [shape=box,label="(68064)"];
n68063 [shape=box,label="(68063)"];
n68062 [shape=box,label="(68062)\nvar r = cast lime.math._RGBA.RGBA_Impl_.__clamp\nvar r = (cast cast cast cast cast cast destPixel >>> 24 & 255) * lime.math._RGBA.RGBA_Impl_.unmult\nvar r = Math.round(r)\nvar r = cast r[r]\nvar g = cast lime.math._RGBA.RGBA_Impl_.__clamp\nvar g = (cast cast cast cast cast cast destPixel >>> 16 & 255) * lime.math._RGBA.RGBA_Impl_.unmult\nvar g = Math.round(g)\nvar g = cast g[g]\nvar b = cast lime.math._RGBA.RGBA_Impl_.__clamp\nvar b = (cast cast cast cast cast cast destPixel >>> 8 & 255) * lime.math._RGBA.RGBA_Impl_.unmult\nvar b = Math.round(b)\nvar b = cast b[b]\nvar destPixel = r & 255\nvar destPixel = destPixel << 24\nvar destPixel = g & 255\nvar destPixel = destPixel << 16\nvar destPixel = destPixel | destPixel\nvar destPixel = b & 255\nvar destPixel = destPixel << 8\nvar destPixel = destPixel | destPixel\nvar destPixel = cast cast cast cast destPixel & 255 & 255\ndestPixel = destPixel | destPixel"];
n68061 [shape=box,label="(68061)\nlime.math._RGBA.RGBA_Impl_.unmult = 255.0 / (cast cast cast cast destPixel & 255)"];
n68061 -> n68062[style="dashed",color="gray",label="sub"];
n68061 -> n68063[style="dashed",color="gray",label="next"];
n68060 [shape=box,label="(68060)\n@:cond-branch tmp"];
n68060 -> n68061[style="dashed",color="gray",label="then"];
n68060 -> n68064[style="dashed",color="gray",label="next"];
n68059 [shape=box,label="(68059)\ntmp = false"];
n68058 [shape=box,label="(68058)\ntmp = (cast cast cast cast destPixel & 255) != 255"];
n68057 [shape=box,label="(68057)\nvar tmp\nvar tmp = (cast cast cast cast destPixel & 255) != 0\n@:cond-branch tmp"];
n68057 -> n68058[style="dashed",color="gray",label="then"];
n68057 -> n68059[style="dashed",color="gray",label="else"];
n68057 -> n68060[style="dashed",color="gray",label="next"];
n68056 [shape=box,label="(68056)\nvar premultiplied = premultiplied\n@:cond-branch premultiplied"];
n68056 -> n68057[style="dashed",color="gray",label="then"];
n68056 -> n68065[style="dashed",color="gray",label="next"];
n68055 [shape=box,label="(68055)\nvar destPixel = destPosition + 2\nvar destPixel = cast cast destData[destPixel] & 255\nvar destPixel = destPixel << 24\nvar destPixel = destPosition + 1\nvar destPixel = cast cast destData[destPixel] & 255\nvar destPixel = destPixel << 16\nvar destPixel = destPixel | destPixel\nvar destPixel = cast cast destData[destPosition] & 255\nvar destPixel = destPixel << 8\nvar destPixel = destPixel | destPixel\nvar destPixel = destPosition + 3\nvar destPixel = cast cast destData[destPixel] & 255\ndestPixel = destPixel | destPixel"];
n68054 [shape=box,label="(68054)\nvar destPixel = destPosition + 1\nvar destPixel = cast cast destData[destPixel] & 255\nvar destPixel = destPixel << 24\nvar destPixel = destPosition + 2\nvar destPixel = cast cast destData[destPixel] & 255\nvar destPixel = destPixel << 16\nvar destPixel = destPixel | destPixel\nvar destPixel = destPosition + 3\nvar destPixel = cast cast destData[destPixel] & 255\nvar destPixel = destPixel << 8\nvar destPixel = destPixel | destPixel\nvar destPixel = cast cast destData[destPosition] & 255\ndestPixel = destPixel | destPixel"];
n68053 [shape=box,label="(68053)\nvar destPixel = cast cast destData[destPosition] & 255\nvar destPixel = destPixel << 24\nvar destPixel = destPosition + 1\nvar destPixel = cast cast destData[destPixel] & 255\nvar destPixel = destPixel << 16\nvar destPixel = destPixel | destPixel\nvar destPixel = destPosition + 2\nvar destPixel = cast cast destData[destPixel] & 255\nvar destPixel = destPixel << 8\nvar destPixel = destPixel | destPixel\nvar destPixel = destPosition + 3\nvar destPixel = cast cast destData[destPixel] & 255\ndestPixel = destPixel | destPixel"];
n68052 [shape=box,label="(68052)\nvar format = @:exhaustive format\n@:cond-branch format"];
n68052 -> n68053[style="dashed",color="gray",label="case 0"];
n68052 -> n68054[style="dashed",color="gray",label="case 1"];
n68052 -> n68055[style="dashed",color="gray",label="case 2"];
n68052 -> n68056[style="dashed",color="gray",label="next"];
n68051 [shape=box,label="(68051)\nformat = 0"];
n68050 [shape=box,label="(68050)\nvar tmp = format == null\n@:cond-branch tmp"];
n68050 -> n68051[style="dashed",color="gray",label="then"];
n68050 -> n68052[style="dashed",color="gray",label="next"];
n68049 [shape=box,label="(68049)\npremultiplied = false"];
n68048 [shape=box,label="(68048)\nvar format = destFormat\nvar premultiplied = destPremultiplied\nvar tmp = premultiplied == null\n@:cond-branch tmp"];
n68048 -> n68049[style="dashed",color="gray",label="then"];
n68048 -> n68050[style="dashed",color="gray",label="next"];
n68047 [shape=box,label="(68047)"];
n68047 -> n68048[style="dashed",color="gray",label="sub"];
n68047 -> n68066[style="dashed",color="gray",label="next"];
n68046 [shape=box,label="(68046)"];
n68045 [shape=box,label="(68045)"];
n68044 [shape=box,label="(68044)"];
n68043 [shape=box,label="(68043)\nvar r = cast lime.math._RGBA.RGBA_Impl_.__clamp\nvar r = (cast cast cast cast cast cast sourcePixel >>> 24 & 255) * lime.math._RGBA.RGBA_Impl_.unmult\nvar r = Math.round(r)\nvar r = cast r[r]\nvar g = cast lime.math._RGBA.RGBA_Impl_.__clamp\nvar g = (cast cast cast cast cast cast sourcePixel >>> 16 & 255) * lime.math._RGBA.RGBA_Impl_.unmult\nvar g = Math.round(g)\nvar g = cast g[g]\nvar b = cast lime.math._RGBA.RGBA_Impl_.__clamp\nvar b = (cast cast cast cast cast cast sourcePixel >>> 8 & 255) * lime.math._RGBA.RGBA_Impl_.unmult\nvar b = Math.round(b)\nvar b = cast b[b]\nvar sourcePixel = r & 255\nvar sourcePixel = sourcePixel << 24\nvar sourcePixel = g & 255\nvar sourcePixel = sourcePixel << 16\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = b & 255\nvar sourcePixel = sourcePixel << 8\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = cast cast cast cast sourcePixel & 255 & 255\nsourcePixel = sourcePixel | sourcePixel"];
n68042 [shape=box,label="(68042)\nlime.math._RGBA.RGBA_Impl_.unmult = 255.0 / (cast cast cast cast sourcePixel & 255)"];
n68042 -> n68043[style="dashed",color="gray",label="sub"];
n68042 -> n68044[style="dashed",color="gray",label="next"];
n68041 [shape=box,label="(68041)\n@:cond-branch tmp"];
n68041 -> n68042[style="dashed",color="gray",label="then"];
n68041 -> n68045[style="dashed",color="gray",label="next"];
n68040 [shape=box,label="(68040)\ntmp = false"];
n68039 [shape=box,label="(68039)\ntmp = (cast cast cast cast sourcePixel & 255) != 255"];
n68038 [shape=box,label="(68038)\nvar tmp\nvar tmp = (cast cast cast cast sourcePixel & 255) != 0\n@:cond-branch tmp"];
n68038 -> n68039[style="dashed",color="gray",label="then"];
n68038 -> n68040[style="dashed",color="gray",label="else"];
n68038 -> n68041[style="dashed",color="gray",label="next"];
n68037 [shape=box,label="(68037)\nvar premultiplied = premultiplied\n@:cond-branch premultiplied"];
n68037 -> n68038[style="dashed",color="gray",label="then"];
n68037 -> n68046[style="dashed",color="gray",label="next"];
n68036 [shape=box,label="(68036)\nvar sourcePixel = sourcePosition + 2\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nvar sourcePixel = sourcePixel << 24\nvar sourcePixel = sourcePosition + 1\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nvar sourcePixel = sourcePixel << 16\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = cast cast sourceData[sourcePosition] & 255\nvar sourcePixel = sourcePixel << 8\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = sourcePosition + 3\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nsourcePixel = sourcePixel | sourcePixel"];
n68035 [shape=box,label="(68035)\nvar sourcePixel = sourcePosition + 1\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nvar sourcePixel = sourcePixel << 24\nvar sourcePixel = sourcePosition + 2\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nvar sourcePixel = sourcePixel << 16\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = sourcePosition + 3\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nvar sourcePixel = sourcePixel << 8\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = cast cast sourceData[sourcePosition] & 255\nsourcePixel = sourcePixel | sourcePixel"];
n68034 [shape=box,label="(68034)\nvar sourcePixel = cast cast sourceData[sourcePosition] & 255\nvar sourcePixel = sourcePixel << 24\nvar sourcePixel = sourcePosition + 1\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nvar sourcePixel = sourcePixel << 16\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = sourcePosition + 2\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nvar sourcePixel = sourcePixel << 8\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = sourcePosition + 3\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nsourcePixel = sourcePixel | sourcePixel"];
n68033 [shape=box,label="(68033)\nvar format = @:exhaustive format\n@:cond-branch format"];
n68033 -> n68034[style="dashed",color="gray",label="case 0"];
n68033 -> n68035[style="dashed",color="gray",label="case 1"];
n68033 -> n68036[style="dashed",color="gray",label="case 2"];
n68033 -> n68037[style="dashed",color="gray",label="next"];
n68032 [shape=box,label="(68032)\nformat = 0"];
n68031 [shape=box,label="(68031)\nvar tmp = format == null\n@:cond-branch tmp"];
n68031 -> n68032[style="dashed",color="gray",label="then"];
n68031 -> n68033[style="dashed",color="gray",label="next"];
n68030 [shape=box,label="(68030)\npremultiplied = false"];
n68029 [shape=box,label="(68029)\nvar format = sourceFormat\nvar premultiplied = sourcePremultiplied\nvar tmp = premultiplied == null\n@:cond-branch tmp"];
n68029 -> n68030[style="dashed",color="gray",label="then"];
n68029 -> n68031[style="dashed",color="gray",label="next"];
n68028 [shape=box,label="(68028)\n` = ` + 1\nvar x = ` - 1"];
n68028 -> n68029[style="dashed",color="gray",label="sub"];
n68028 -> n68047[style="dashed",color="gray",label="next"];
n68027 [shape=box,label="(68027)\nbreak"];
n68026 [shape=box,label="(68026)\nvar tmp = ! ((` < `1))\n@:cond-branch tmp"];
n68026 -> n68027[style="dashed",color="gray",label="then"];
n68026 -> n68028[style="dashed",color="gray",label="next"];
n68025 [shape=box,label="<loop-head>
(68025)"];
n68024 [shape=box,label="(68024)\nwhile ((true)) @:block 68026"];
n68024 -> n68025[style="dashed",color="gray",label="loop-head"];
n68024 -> n68026[style="dashed",color="gray",label="loop-body"];
n68024 -> n68117[style="dashed",color="gray",label="next"];
n68023 [shape=box,label="(68023)\nvar ` = 0\nvar `1 = destView.width"];
n68023 -> n68024[style="dashed",color="gray",label="merge"];
n68022 [shape=box,label="(68022)\n` = ` + 1\nvar y = ` - 1\nvar sourceView = sourceView.byteOffset\nvar sourcePosition = sourceView.stride * y\nsourcePosition = sourceView + sourcePosition\nvar destView = destView.byteOffset\nvar destPosition = destView.stride * y\ndestPosition = destView + destPosition\nvar alphaView = alphaView.byteOffset\nvar alphaPosition = alphaView.stride * y\nalphaPosition = alphaView + alphaPosition"];
n68022 -> n68023[style="dashed",color="gray",label="sub"];
n68022 -> n68118[style="dashed",color="gray",label="next"];
n68021 [shape=box,label="(68021)\nbreak"];
n68020 [shape=box,label="(68020)\nvar tmp = ! ((` < `1))\n@:cond-branch tmp"];
n68020 -> n68021[style="dashed",color="gray",label="then"];
n68020 -> n68022[style="dashed",color="gray",label="next"];
n68019 [shape=box,label="<loop-head>
(68019)"];
n68018 [shape=box,label="(68018)\nwhile ((true)) @:block 68020"];
n68018 -> n68019[style="dashed",color="gray",label="loop-head"];
n68018 -> n68020[style="dashed",color="gray",label="loop-body"];
n68018 -> n68119[style="dashed",color="gray",label="next"];
n68017 [shape=box,label="(68017)\nvar ` = 0\nvar `1 = destView.height"];
n68017 -> n68120[style="dashed",color="gray",label="merge"];
n68016 [shape=box,label="(68016)\nvar ` = 0\nvar `1 = destView.height"];
n68016 -> n68018[style="dashed",color="gray",label="merge"];
n68015 [shape=box,label="(68015)\nvar alphaView = sourceView.y + (alphaView)\nvar alphaView = new lime._internal.graphics._ImageDataUtil.ImageDataView(alphaImage, new lime.math.Rectangle(alphaView, alphaView, sourceView.width, sourceView.height))\nvar tmp = cast destPoint.x | 0\nvar tmp = cast destPoint.y | 0\ndestView.clip(tmp, tmp, alphaView.width, alphaView.height)\nvar blend = blend\n@:cond-branch blend"];
n68015 -> n68016[style="dashed",color="gray",label="then"];
n68015 -> n68017[style="dashed",color="gray",label="else"];
n68015 -> n68195[style="dashed",color="gray",label="next"];
n68014 [shape=box,label="(68014)\nalphaView = alphaPoint.y"];
n68013 [shape=box,label="(68013)\nalphaView = 0"];
n68012 [shape=box,label="(68012)\nvar alphaView = sourceView.x + (alphaView)\nvar alphaView\nvar alphaView = alphaPoint == null\n@:cond-branch alphaView"];
n68012 -> n68013[style="dashed",color="gray",label="then"];
n68012 -> n68014[style="dashed",color="gray",label="else"];
n68012 -> n68015[style="dashed",color="gray",label="next"];
n68011 [shape=box,label="(68011)\nalphaView = alphaPoint.x"];
n68010 [shape=box,label="(68010)\nalphaView = 0"];
n68009 [shape=box,label="(68009)"];
n68008 [shape=box,label="(68008)"];
n68007 [shape=box,label="(68007)"];
n68006 [shape=box,label="(68006)"];
n68005 [shape=box,label="(68005)"];
n68004 [shape=box,label="(68004)\nsourcePosition = sourcePosition + 4\ndestPosition = destPosition + 4"];
n68003 [shape=box,label="(68003)"];
n68002 [shape=box,label="(68002)\ncast destData[destPosition] = cast cast cast cast cast cast sourcePixel >>> 8 & 255\nvar tmp = destPosition + 1\ncast destData[tmp] = cast cast cast cast cast cast sourcePixel >>> 16 & 255\nvar tmp = destPosition + 2\ncast destData[tmp] = cast cast cast cast cast cast sourcePixel >>> 24 & 255\nvar tmp = destPosition + 3\ncast destData[tmp] = cast cast cast cast sourcePixel & 255"];
n68001 [shape=box,label="(68001)\ncast destData[destPosition] = cast cast cast cast sourcePixel & 255\nvar tmp = destPosition + 1\ncast destData[tmp] = cast cast cast cast cast cast sourcePixel >>> 24 & 255\nvar tmp = destPosition + 2\ncast destData[tmp] = cast cast cast cast cast cast sourcePixel >>> 16 & 255\nvar tmp = destPosition + 3\ncast destData[tmp] = cast cast cast cast cast cast sourcePixel >>> 8 & 255"];
n68000 [shape=box,label="(68000)\ncast destData[destPosition] = cast cast cast cast cast cast sourcePixel >>> 24 & 255\nvar tmp = destPosition + 1\ncast destData[tmp] = cast cast cast cast cast cast sourcePixel >>> 16 & 255\nvar tmp = destPosition + 2\ncast destData[tmp] = cast cast cast cast cast cast sourcePixel >>> 8 & 255\nvar tmp = destPosition + 3\ncast destData[tmp] = cast cast cast cast sourcePixel & 255"];
n67999 [shape=box,label="(67999)\nvar format = @:exhaustive format\n@:cond-branch format"];
n67999 -> n68000[style="dashed",color="gray",label="case 0"];
n67999 -> n68001[style="dashed",color="gray",label="case 1"];
n67999 -> n68002[style="dashed",color="gray",label="case 2"];
n67999 -> n68003[style="dashed",color="gray",label="next"];
n67998 [shape=box,label="(67998)"];
n67997 [shape=box,label="(67997)"];
n67996 [shape=box,label="(67996)"];
n67995 [shape=box,label="(67995)\nvar r = (cast cast cast cast cast cast sourcePixel >>> 24 & 255) * lime.math._RGBA.RGBA_Impl_.a16\nvar r = r >> 16\nvar g = (cast cast cast cast cast cast sourcePixel >>> 16 & 255) * lime.math._RGBA.RGBA_Impl_.a16\nvar g = g >> 16\nvar b = (cast cast cast cast cast cast sourcePixel >>> 8 & 255) * lime.math._RGBA.RGBA_Impl_.a16\nvar b = b >> 16\nvar sourcePixel = r & 255\nvar sourcePixel = sourcePixel << 24\nvar sourcePixel = g & 255\nvar sourcePixel = sourcePixel << 16\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = b & 255\nvar sourcePixel = sourcePixel << 8\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = cast cast cast cast sourcePixel & 255 & 255\nsourcePixel = sourcePixel | sourcePixel"];
n67994 [shape=box,label="(67994)\nlime.math._RGBA.RGBA_Impl_.a16 = cast cast lime.math._RGBA.RGBA_Impl_.__alpha16[cast cast cast cast sourcePixel & 255]"];
n67994 -> n67995[style="dashed",color="gray",label="sub"];
n67994 -> n67996[style="dashed",color="gray",label="next"];
n67993 [shape=box,label="(67993)"];
n67992 [shape=box,label="(67992)\nsourcePixel = 0"];
n67991 [shape=box,label="(67991)\nvar tmp = (cast cast cast cast sourcePixel & 255) != 255\n@:cond-branch tmp"];
n67991 -> n67994[style="dashed",color="gray",label="then"];
n67991 -> n67997[style="dashed",color="gray",label="next"];
n67990 [shape=box,label="(67990)\nvar tmp = cast cast sourcePixel != 0\n@:cond-branch tmp"];
n67990 -> n67992[style="dashed",color="gray",label="then"];
n67990 -> n67993[style="dashed",color="gray",label="next"];
n67989 [shape=box,label="(67989)\nvar tmp = (cast cast cast cast sourcePixel & 255) == 0\n@:cond-branch tmp"];
n67989 -> n67990[style="dashed",color="gray",label="then"];
n67989 -> n67991[style="dashed",color="gray",label="else"];
n67989 -> n67998[style="dashed",color="gray",label="next"];
n67988 [shape=box,label="(67988)\nvar premultiplied = premultiplied\n@:cond-branch premultiplied"];
n67988 -> n67989[style="dashed",color="gray",label="then"];
n67988 -> n67999[style="dashed",color="gray",label="next"];
n67987 [shape=box,label="(67987)\nformat = 0"];
n67986 [shape=box,label="(67986)\nvar tmp = format == null\n@:cond-branch tmp"];
n67986 -> n67987[style="dashed",color="gray",label="then"];
n67986 -> n67988[style="dashed",color="gray",label="next"];
n67985 [shape=box,label="(67985)\npremultiplied = false"];
n67984 [shape=box,label="(67984)\nvar format = destFormat\nvar premultiplied = destPremultiplied\nvar tmp = premultiplied == null\n@:cond-branch tmp"];
n67984 -> n67985[style="dashed",color="gray",label="then"];
n67984 -> n67986[style="dashed",color="gray",label="next"];
n67983 [shape=box,label="(67983)"];
n67983 -> n67984[style="dashed",color="gray",label="sub"];
n67983 -> n68004[style="dashed",color="gray",label="next"];
n67982 [shape=box,label="(67982)"];
n67981 [shape=box,label="(67981)"];
n67980 [shape=box,label="(67980)"];
n67979 [shape=box,label="(67979)\nvar r = cast lime.math._RGBA.RGBA_Impl_.__clamp\nvar r = (cast cast cast cast cast cast sourcePixel >>> 24 & 255) * lime.math._RGBA.RGBA_Impl_.unmult\nvar r = Math.round(r)\nvar r = cast r[r]\nvar g = cast lime.math._RGBA.RGBA_Impl_.__clamp\nvar g = (cast cast cast cast cast cast sourcePixel >>> 16 & 255) * lime.math._RGBA.RGBA_Impl_.unmult\nvar g = Math.round(g)\nvar g = cast g[g]\nvar b = cast lime.math._RGBA.RGBA_Impl_.__clamp\nvar b = (cast cast cast cast cast cast sourcePixel >>> 8 & 255) * lime.math._RGBA.RGBA_Impl_.unmult\nvar b = Math.round(b)\nvar b = cast b[b]\nvar sourcePixel = r & 255\nvar sourcePixel = sourcePixel << 24\nvar sourcePixel = g & 255\nvar sourcePixel = sourcePixel << 16\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = b & 255\nvar sourcePixel = sourcePixel << 8\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = cast cast cast cast sourcePixel & 255 & 255\nsourcePixel = sourcePixel | sourcePixel"];
n67978 [shape=box,label="(67978)\nlime.math._RGBA.RGBA_Impl_.unmult = 255.0 / (cast cast cast cast sourcePixel & 255)"];
n67978 -> n67979[style="dashed",color="gray",label="sub"];
n67978 -> n67980[style="dashed",color="gray",label="next"];
n67977 [shape=box,label="(67977)\n@:cond-branch tmp"];
n67977 -> n67978[style="dashed",color="gray",label="then"];
n67977 -> n67981[style="dashed",color="gray",label="next"];
n67976 [shape=box,label="(67976)\ntmp = false"];
n67975 [shape=box,label="(67975)\ntmp = (cast cast cast cast sourcePixel & 255) != 255"];
n67974 [shape=box,label="(67974)\nvar tmp\nvar tmp = (cast cast cast cast sourcePixel & 255) != 0\n@:cond-branch tmp"];
n67974 -> n67975[style="dashed",color="gray",label="then"];
n67974 -> n67976[style="dashed",color="gray",label="else"];
n67974 -> n67977[style="dashed",color="gray",label="next"];
n67973 [shape=box,label="(67973)\nvar premultiplied = premultiplied\n@:cond-branch premultiplied"];
n67973 -> n67974[style="dashed",color="gray",label="then"];
n67973 -> n67982[style="dashed",color="gray",label="next"];
n67972 [shape=box,label="(67972)\nvar sourcePixel = sourcePosition + 2\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nvar sourcePixel = sourcePixel << 24\nvar sourcePixel = sourcePosition + 1\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nvar sourcePixel = sourcePixel << 16\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = cast cast sourceData[sourcePosition] & 255\nvar sourcePixel = sourcePixel << 8\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = sourcePosition + 3\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nsourcePixel = sourcePixel | sourcePixel"];
n67971 [shape=box,label="(67971)\nvar sourcePixel = sourcePosition + 1\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nvar sourcePixel = sourcePixel << 24\nvar sourcePixel = sourcePosition + 2\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nvar sourcePixel = sourcePixel << 16\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = sourcePosition + 3\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nvar sourcePixel = sourcePixel << 8\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = cast cast sourceData[sourcePosition] & 255\nsourcePixel = sourcePixel | sourcePixel"];
n67970 [shape=box,label="(67970)\nvar sourcePixel = cast cast sourceData[sourcePosition] & 255\nvar sourcePixel = sourcePixel << 24\nvar sourcePixel = sourcePosition + 1\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nvar sourcePixel = sourcePixel << 16\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = sourcePosition + 2\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nvar sourcePixel = sourcePixel << 8\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = sourcePosition + 3\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nsourcePixel = sourcePixel | sourcePixel"];
n67969 [shape=box,label="(67969)\nvar format = @:exhaustive format\n@:cond-branch format"];
n67969 -> n67970[style="dashed",color="gray",label="case 0"];
n67969 -> n67971[style="dashed",color="gray",label="case 1"];
n67969 -> n67972[style="dashed",color="gray",label="case 2"];
n67969 -> n67973[style="dashed",color="gray",label="next"];
n67968 [shape=box,label="(67968)\nformat = 0"];
n67967 [shape=box,label="(67967)\nvar tmp = format == null\n@:cond-branch tmp"];
n67967 -> n67968[style="dashed",color="gray",label="then"];
n67967 -> n67969[style="dashed",color="gray",label="next"];
n67966 [shape=box,label="(67966)\npremultiplied = false"];
n67965 [shape=box,label="(67965)\nvar format = sourceFormat\nvar premultiplied = sourcePremultiplied\nvar tmp = premultiplied == null\n@:cond-branch tmp"];
n67965 -> n67966[style="dashed",color="gray",label="then"];
n67965 -> n67967[style="dashed",color="gray",label="next"];
n67964 [shape=box,label="(67964)\n` = ` + 1\nvar x = ` - 1"];
n67964 -> n67965[style="dashed",color="gray",label="sub"];
n67964 -> n67983[style="dashed",color="gray",label="next"];
n67963 [shape=box,label="(67963)\nbreak"];
n67962 [shape=box,label="(67962)\nvar tmp = ! ((` < `1))\n@:cond-branch tmp"];
n67962 -> n67963[style="dashed",color="gray",label="then"];
n67962 -> n67964[style="dashed",color="gray",label="next"];
n67961 [shape=box,label="<loop-head>
(67961)"];
n67960 [shape=box,label="(67960)\nwhile ((true)) @:block 67962"];
n67960 -> n67961[style="dashed",color="gray",label="loop-head"];
n67960 -> n67962[style="dashed",color="gray",label="loop-body"];
n67960 -> n68005[style="dashed",color="gray",label="next"];
n67959 [shape=box,label="(67959)\nvar ` = 0\nvar `1 = destView.width"];
n67959 -> n67960[style="dashed",color="gray",label="merge"];
n67958 [shape=box,label="(67958)\n` = ` + 1\nvar y = ` - 1\nvar sourceView = sourceView.byteOffset\nvar sourcePosition = sourceView.stride * y\nsourcePosition = sourceView + sourcePosition\nvar destView = destView.byteOffset\nvar destPosition = destView.stride * y\ndestPosition = destView + destPosition"];
n67958 -> n67959[style="dashed",color="gray",label="sub"];
n67958 -> n68006[style="dashed",color="gray",label="next"];
n67957 [shape=box,label="(67957)\nbreak"];
n67956 [shape=box,label="(67956)\nvar tmp = ! ((` < `1))\n@:cond-branch tmp"];
n67956 -> n67957[style="dashed",color="gray",label="then"];
n67956 -> n67958[style="dashed",color="gray",label="next"];
n67955 [shape=box,label="<loop-head>
(67955)"];
n67954 [shape=box,label="(67954)\nwhile ((true)) @:block 67956"];
n67954 -> n67955[style="dashed",color="gray",label="loop-head"];
n67954 -> n67956[style="dashed",color="gray",label="loop-body"];
n67954 -> n68007[style="dashed",color="gray",label="next"];
n67953 [shape=box,label="(67953)"];
n67952 [shape=box,label="(67952)\n` = ` + 1\nvar y = ` - 1\nvar sourceView = sourceView.byteOffset\nvar sourcePosition = sourceView.stride * y\nsourcePosition = sourceView + sourcePosition\nvar destView = destView.byteOffset\nvar destPosition = destView.stride * y\ndestPosition = destView + destPosition\nvar tmp = destView.width * destBytesPerPixel\nvar tmp = sourcePosition + tmp\nvar tmp = sourceData.subarray(sourcePosition, tmp)\ndestData.set(tmp, destPosition)"];
n67951 [shape=box,label="(67951)\nbreak"];
n67950 [shape=box,label="(67950)\nvar tmp = ! ((` < `1))\n@:cond-branch tmp"];
n67950 -> n67951[style="dashed",color="gray",label="then"];
n67950 -> n67952[style="dashed",color="gray",label="next"];
n67949 [shape=box,label="<loop-head>
(67949)"];
n67948 [shape=box,label="(67948)\nwhile ((true)) @:block 67950"];
n67948 -> n67949[style="dashed",color="gray",label="loop-head"];
n67948 -> n67950[style="dashed",color="gray",label="loop-body"];
n67948 -> n67953[style="dashed",color="gray",label="next"];
n67947 [shape=box,label="(67947)\nvar ` = 0\nvar `1 = destView.height"];
n67947 -> n67954[style="dashed",color="gray",label="merge"];
n67946 [shape=box,label="(67946)\nvar ` = 0\nvar `1 = destView.height"];
n67946 -> n67948[style="dashed",color="gray",label="merge"];
n67945 [shape=box,label="(67945)\n@:cond-branch tmp"];
n67945 -> n67946[style="dashed",color="gray",label="then"];
n67945 -> n67947[style="dashed",color="gray",label="else"];
n67945 -> n68008[style="dashed",color="gray",label="next"];
n67944 [shape=box,label="(67944)\ntmp = false"];
n67943 [shape=box,label="(67943)\ntmp = sourceBytesPerPixel == destBytesPerPixel"];
n67942 [shape=box,label="(67942)\n@:cond-branch tmp"];
n67942 -> n67943[style="dashed",color="gray",label="then"];
n67942 -> n67944[style="dashed",color="gray",label="else"];
n67942 -> n67945[style="dashed",color="gray",label="next"];
n67941 [shape=box,label="(67941)\ntmp = false"];
n67940 [shape=box,label="(67940)\ntmp = sourcePremultiplied == destPremultiplied"];
n67939 [shape=box,label="(67939)"];
n67938 [shape=box,label="(67938)"];
n67937 [shape=box,label="(67937)"];
n67936 [shape=box,label="(67936)\nsourcePosition = sourcePosition + 4\ndestPosition = destPosition + 4"];
n67935 [shape=box,label="(67935)"];
n67934 [shape=box,label="(67934)\ncast destData[destPosition] = cast cast cast cast cast cast destPixel >>> 8 & 255\nvar tmp = destPosition + 1\ncast destData[tmp] = cast cast cast cast cast cast destPixel >>> 16 & 255\nvar tmp = destPosition + 2\ncast destData[tmp] = cast cast cast cast cast cast destPixel >>> 24 & 255\nvar tmp = destPosition + 3\ncast destData[tmp] = cast cast cast cast destPixel & 255"];
n67933 [shape=box,label="(67933)\ncast destData[destPosition] = cast cast cast cast destPixel & 255\nvar tmp = destPosition + 1\ncast destData[tmp] = cast cast cast cast cast cast destPixel >>> 24 & 255\nvar tmp = destPosition + 2\ncast destData[tmp] = cast cast cast cast cast cast destPixel >>> 16 & 255\nvar tmp = destPosition + 3\ncast destData[tmp] = cast cast cast cast cast cast destPixel >>> 8 & 255"];
n67932 [shape=box,label="(67932)\ncast destData[destPosition] = cast cast cast cast cast cast destPixel >>> 24 & 255\nvar tmp = destPosition + 1\ncast destData[tmp] = cast cast cast cast cast cast destPixel >>> 16 & 255\nvar tmp = destPosition + 2\ncast destData[tmp] = cast cast cast cast cast cast destPixel >>> 8 & 255\nvar tmp = destPosition + 3\ncast destData[tmp] = cast cast cast cast destPixel & 255"];
n67931 [shape=box,label="(67931)\nvar format = @:exhaustive format\n@:cond-branch format"];
n67931 -> n67932[style="dashed",color="gray",label="case 0"];
n67931 -> n67933[style="dashed",color="gray",label="case 1"];
n67931 -> n67934[style="dashed",color="gray",label="case 2"];
n67931 -> n67935[style="dashed",color="gray",label="next"];
n67930 [shape=box,label="(67930)"];
n67929 [shape=box,label="(67929)"];
n67928 [shape=box,label="(67928)"];
n67927 [shape=box,label="(67927)\nvar r = (cast cast cast cast cast cast destPixel >>> 24 & 255) * lime.math._RGBA.RGBA_Impl_.a16\nvar r = r >> 16\nvar g = (cast cast cast cast cast cast destPixel >>> 16 & 255) * lime.math._RGBA.RGBA_Impl_.a16\nvar g = g >> 16\nvar b = (cast cast cast cast cast cast destPixel >>> 8 & 255) * lime.math._RGBA.RGBA_Impl_.a16\nvar b = b >> 16\nvar destPixel = r & 255\nvar destPixel = destPixel << 24\nvar destPixel = g & 255\nvar destPixel = destPixel << 16\nvar destPixel = destPixel | destPixel\nvar destPixel = b & 255\nvar destPixel = destPixel << 8\nvar destPixel = destPixel | destPixel\nvar destPixel = cast cast cast cast destPixel & 255 & 255\ndestPixel = destPixel | destPixel"];
n67926 [shape=box,label="(67926)\nlime.math._RGBA.RGBA_Impl_.a16 = cast cast lime.math._RGBA.RGBA_Impl_.__alpha16[cast cast cast cast destPixel & 255]"];
n67926 -> n67927[style="dashed",color="gray",label="sub"];
n67926 -> n67928[style="dashed",color="gray",label="next"];
n67925 [shape=box,label="(67925)"];
n67924 [shape=box,label="(67924)\ndestPixel = 0"];
n67923 [shape=box,label="(67923)\nvar tmp = (cast cast cast cast destPixel & 255) != 255\n@:cond-branch tmp"];
n67923 -> n67926[style="dashed",color="gray",label="then"];
n67923 -> n67929[style="dashed",color="gray",label="next"];
n67922 [shape=box,label="(67922)\nvar tmp = cast cast destPixel != 0\n@:cond-branch tmp"];
n67922 -> n67924[style="dashed",color="gray",label="then"];
n67922 -> n67925[style="dashed",color="gray",label="next"];
n67921 [shape=box,label="(67921)\nvar tmp = (cast cast cast cast destPixel & 255) == 0\n@:cond-branch tmp"];
n67921 -> n67922[style="dashed",color="gray",label="then"];
n67921 -> n67923[style="dashed",color="gray",label="else"];
n67921 -> n67930[style="dashed",color="gray",label="next"];
n67920 [shape=box,label="(67920)\nvar premultiplied = premultiplied\n@:cond-branch premultiplied"];
n67920 -> n67921[style="dashed",color="gray",label="then"];
n67920 -> n67931[style="dashed",color="gray",label="next"];
n67919 [shape=box,label="(67919)\nformat = 0"];
n67918 [shape=box,label="(67918)\nvar tmp = format == null\n@:cond-branch tmp"];
n67918 -> n67919[style="dashed",color="gray",label="then"];
n67918 -> n67920[style="dashed",color="gray",label="next"];
n67917 [shape=box,label="(67917)\npremultiplied = false"];
n67916 [shape=box,label="(67916)\nvar format = destFormat\nvar premultiplied = destPremultiplied\nvar tmp = premultiplied == null\n@:cond-branch tmp"];
n67916 -> n67917[style="dashed",color="gray",label="then"];
n67916 -> n67918[style="dashed",color="gray",label="next"];
n67915 [shape=box,label="(67915)"];
n67915 -> n67916[style="dashed",color="gray",label="sub"];
n67915 -> n67936[style="dashed",color="gray",label="next"];
n67914 [shape=box,label="(67914)"];
n67913 [shape=box,label="(67913)\nvar value = cast lime.math._RGBA.RGBA_Impl_.__clamp\nvar value = blendAlpha * 255.0\nvar value = Math.round(value)\nvar value = cast value[value]\nvar destPixel = cast cast cast cast cast cast destPixel >>> 24 & 255 & 255\nvar destPixel = destPixel << 24\nvar destPixel = cast cast cast cast cast cast destPixel >>> 16 & 255 & 255\nvar destPixel = destPixel << 16\nvar destPixel = destPixel | destPixel\nvar destPixel = cast cast cast cast cast cast destPixel >>> 8 & 255 & 255\nvar destPixel = destPixel << 8\nvar destPixel = destPixel | destPixel\nvar destPixel = value & 255\ndestPixel = destPixel | destPixel"];
n67912 [shape=box,label="(67912)"];
n67912 -> n67913[style="dashed",color="gray",label="sub"];
n67912 -> n67914[style="dashed",color="gray",label="next"];
n67911 [shape=box,label="(67911)\nvar value = cast lime.math._RGBA.RGBA_Impl_.__clamp\nvar value = (cast cast cast cast cast cast sourcePixel >>> 8 & 255) * sourceAlpha\nvar value = (cast cast cast cast cast cast destPixel >>> 8 & 255) * destAlpha\nvar value = value * oneMinusSourceAlpha\nvar value = value + value\nvar value = value / blendAlpha\nvar value = Math.round(value)\nvar value = cast value[value]\nvar destPixel = cast cast cast cast cast cast destPixel >>> 24 & 255 & 255\nvar destPixel = destPixel << 24\nvar destPixel = cast cast cast cast cast cast destPixel >>> 16 & 255 & 255\nvar destPixel = destPixel << 16\nvar destPixel = destPixel | destPixel\nvar destPixel = value & 255\nvar destPixel = destPixel << 8\nvar destPixel = destPixel | destPixel\nvar destPixel = cast cast cast cast destPixel & 255 & 255\ndestPixel = destPixel | destPixel"];
n67910 [shape=box,label="(67910)"];
n67910 -> n67911[style="dashed",color="gray",label="sub"];
n67910 -> n67912[style="dashed",color="gray",label="next"];
n67909 [shape=box,label="(67909)\nvar value = cast lime.math._RGBA.RGBA_Impl_.__clamp\nvar value = (cast cast cast cast cast cast sourcePixel >>> 16 & 255) * sourceAlpha\nvar value = (cast cast cast cast cast cast destPixel >>> 16 & 255) * destAlpha\nvar value = value * oneMinusSourceAlpha\nvar value = value + value\nvar value = value / blendAlpha\nvar value = Math.round(value)\nvar value = cast value[value]\nvar destPixel = cast cast cast cast cast cast destPixel >>> 24 & 255 & 255\nvar destPixel = destPixel << 24\nvar destPixel = value & 255\nvar destPixel = destPixel << 16\nvar destPixel = destPixel | destPixel\nvar destPixel = cast cast cast cast cast cast destPixel >>> 8 & 255 & 255\nvar destPixel = destPixel << 8\nvar destPixel = destPixel | destPixel\nvar destPixel = cast cast cast cast destPixel & 255 & 255\ndestPixel = destPixel | destPixel"];
n67908 [shape=box,label="(67908)"];
n67908 -> n67909[style="dashed",color="gray",label="sub"];
n67908 -> n67910[style="dashed",color="gray",label="next"];
n67907 [shape=box,label="(67907)\nvar value = cast lime.math._RGBA.RGBA_Impl_.__clamp\nvar value = (cast cast cast cast cast cast sourcePixel >>> 24 & 255) * sourceAlpha\nvar value = (cast cast cast cast cast cast destPixel >>> 24 & 255) * destAlpha\nvar value = value * oneMinusSourceAlpha\nvar value = value + value\nvar value = value / blendAlpha\nvar value = Math.round(value)\nvar value = cast value[value]\nvar destPixel = value & 255\nvar destPixel = destPixel << 24\nvar destPixel = cast cast cast cast cast cast destPixel >>> 16 & 255 & 255\nvar destPixel = destPixel << 16\nvar destPixel = destPixel | destPixel\nvar destPixel = cast cast cast cast cast cast destPixel >>> 8 & 255 & 255\nvar destPixel = destPixel << 8\nvar destPixel = destPixel | destPixel\nvar destPixel = cast cast cast cast destPixel & 255 & 255\ndestPixel = destPixel | destPixel"];
n67906 [shape=box,label="(67906)"];
n67906 -> n67907[style="dashed",color="gray",label="sub"];
n67906 -> n67908[style="dashed",color="gray",label="next"];
n67905 [shape=box,label="(67905)\ndestPixel = 0"];
n67904 [shape=box,label="(67904)\nsourceAlpha = (cast cast cast cast sourcePixel & 255) / 255.0\ndestAlpha = (cast cast cast cast destPixel & 255) / 255.0\noneMinusSourceAlpha = 1 - sourceAlpha\nvar blendAlpha = destAlpha * oneMinusSourceAlpha\nblendAlpha = sourceAlpha + blendAlpha\nvar tmp = blendAlpha == 0\n@:cond-branch tmp"];
n67904 -> n67905[style="dashed",color="gray",label="then"];
n67904 -> n67906[style="dashed",color="gray",label="else"];
n67904 -> n67915[style="dashed",color="gray",label="next"];
n67903 [shape=box,label="(67903)"];
n67902 [shape=box,label="(67902)"];
n67901 [shape=box,label="(67901)"];
n67900 [shape=box,label="(67900)\nvar r = cast lime.math._RGBA.RGBA_Impl_.__clamp\nvar r = (cast cast cast cast cast cast destPixel >>> 24 & 255) * lime.math._RGBA.RGBA_Impl_.unmult\nvar r = Math.round(r)\nvar r = cast r[r]\nvar g = cast lime.math._RGBA.RGBA_Impl_.__clamp\nvar g = (cast cast cast cast cast cast destPixel >>> 16 & 255) * lime.math._RGBA.RGBA_Impl_.unmult\nvar g = Math.round(g)\nvar g = cast g[g]\nvar b = cast lime.math._RGBA.RGBA_Impl_.__clamp\nvar b = (cast cast cast cast cast cast destPixel >>> 8 & 255) * lime.math._RGBA.RGBA_Impl_.unmult\nvar b = Math.round(b)\nvar b = cast b[b]\nvar destPixel = r & 255\nvar destPixel = destPixel << 24\nvar destPixel = g & 255\nvar destPixel = destPixel << 16\nvar destPixel = destPixel | destPixel\nvar destPixel = b & 255\nvar destPixel = destPixel << 8\nvar destPixel = destPixel | destPixel\nvar destPixel = cast cast cast cast destPixel & 255 & 255\ndestPixel = destPixel | destPixel"];
n67899 [shape=box,label="(67899)\nlime.math._RGBA.RGBA_Impl_.unmult = 255.0 / (cast cast cast cast destPixel & 255)"];
n67899 -> n67900[style="dashed",color="gray",label="sub"];
n67899 -> n67901[style="dashed",color="gray",label="next"];
n67898 [shape=box,label="(67898)\n@:cond-branch tmp"];
n67898 -> n67899[style="dashed",color="gray",label="then"];
n67898 -> n67902[style="dashed",color="gray",label="next"];
n67897 [shape=box,label="(67897)\ntmp = false"];
n67896 [shape=box,label="(67896)\ntmp = (cast cast cast cast destPixel & 255) != 255"];
n67895 [shape=box,label="(67895)\nvar tmp\nvar tmp = (cast cast cast cast destPixel & 255) != 0\n@:cond-branch tmp"];
n67895 -> n67896[style="dashed",color="gray",label="then"];
n67895 -> n67897[style="dashed",color="gray",label="else"];
n67895 -> n67898[style="dashed",color="gray",label="next"];
n67894 [shape=box,label="(67894)\nvar premultiplied = premultiplied\n@:cond-branch premultiplied"];
n67894 -> n67895[style="dashed",color="gray",label="then"];
n67894 -> n67903[style="dashed",color="gray",label="next"];
n67893 [shape=box,label="(67893)\nvar destPixel = destPosition + 2\nvar destPixel = cast cast destData[destPixel] & 255\nvar destPixel = destPixel << 24\nvar destPixel = destPosition + 1\nvar destPixel = cast cast destData[destPixel] & 255\nvar destPixel = destPixel << 16\nvar destPixel = destPixel | destPixel\nvar destPixel = cast cast destData[destPosition] & 255\nvar destPixel = destPixel << 8\nvar destPixel = destPixel | destPixel\nvar destPixel = destPosition + 3\nvar destPixel = cast cast destData[destPixel] & 255\ndestPixel = destPixel | destPixel"];
n67892 [shape=box,label="(67892)\nvar destPixel = destPosition + 1\nvar destPixel = cast cast destData[destPixel] & 255\nvar destPixel = destPixel << 24\nvar destPixel = destPosition + 2\nvar destPixel = cast cast destData[destPixel] & 255\nvar destPixel = destPixel << 16\nvar destPixel = destPixel | destPixel\nvar destPixel = destPosition + 3\nvar destPixel = cast cast destData[destPixel] & 255\nvar destPixel = destPixel << 8\nvar destPixel = destPixel | destPixel\nvar destPixel = cast cast destData[destPosition] & 255\ndestPixel = destPixel | destPixel"];
n67891 [shape=box,label="(67891)\nvar destPixel = cast cast destData[destPosition] & 255\nvar destPixel = destPixel << 24\nvar destPixel = destPosition + 1\nvar destPixel = cast cast destData[destPixel] & 255\nvar destPixel = destPixel << 16\nvar destPixel = destPixel | destPixel\nvar destPixel = destPosition + 2\nvar destPixel = cast cast destData[destPixel] & 255\nvar destPixel = destPixel << 8\nvar destPixel = destPixel | destPixel\nvar destPixel = destPosition + 3\nvar destPixel = cast cast destData[destPixel] & 255\ndestPixel = destPixel | destPixel"];
n67890 [shape=box,label="(67890)\nvar format = @:exhaustive format\n@:cond-branch format"];
n67890 -> n67891[style="dashed",color="gray",label="case 0"];
n67890 -> n67892[style="dashed",color="gray",label="case 1"];
n67890 -> n67893[style="dashed",color="gray",label="case 2"];
n67890 -> n67894[style="dashed",color="gray",label="next"];
n67889 [shape=box,label="(67889)\nformat = 0"];
n67888 [shape=box,label="(67888)\nvar tmp = format == null\n@:cond-branch tmp"];
n67888 -> n67889[style="dashed",color="gray",label="then"];
n67888 -> n67890[style="dashed",color="gray",label="next"];
n67887 [shape=box,label="(67887)\npremultiplied = false"];
n67886 [shape=box,label="(67886)\nvar format = destFormat\nvar premultiplied = destPremultiplied\nvar tmp = premultiplied == null\n@:cond-branch tmp"];
n67886 -> n67887[style="dashed",color="gray",label="then"];
n67886 -> n67888[style="dashed",color="gray",label="next"];
n67885 [shape=box,label="(67885)"];
n67885 -> n67886[style="dashed",color="gray",label="sub"];
n67885 -> n67904[style="dashed",color="gray",label="next"];
n67884 [shape=box,label="(67884)"];
n67883 [shape=box,label="(67883)"];
n67882 [shape=box,label="(67882)"];
n67881 [shape=box,label="(67881)\nvar r = cast lime.math._RGBA.RGBA_Impl_.__clamp\nvar r = (cast cast cast cast cast cast sourcePixel >>> 24 & 255) * lime.math._RGBA.RGBA_Impl_.unmult\nvar r = Math.round(r)\nvar r = cast r[r]\nvar g = cast lime.math._RGBA.RGBA_Impl_.__clamp\nvar g = (cast cast cast cast cast cast sourcePixel >>> 16 & 255) * lime.math._RGBA.RGBA_Impl_.unmult\nvar g = Math.round(g)\nvar g = cast g[g]\nvar b = cast lime.math._RGBA.RGBA_Impl_.__clamp\nvar b = (cast cast cast cast cast cast sourcePixel >>> 8 & 255) * lime.math._RGBA.RGBA_Impl_.unmult\nvar b = Math.round(b)\nvar b = cast b[b]\nvar sourcePixel = r & 255\nvar sourcePixel = sourcePixel << 24\nvar sourcePixel = g & 255\nvar sourcePixel = sourcePixel << 16\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = b & 255\nvar sourcePixel = sourcePixel << 8\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = cast cast cast cast sourcePixel & 255 & 255\nsourcePixel = sourcePixel | sourcePixel"];
n67880 [shape=box,label="(67880)\nlime.math._RGBA.RGBA_Impl_.unmult = 255.0 / (cast cast cast cast sourcePixel & 255)"];
n67880 -> n67881[style="dashed",color="gray",label="sub"];
n67880 -> n67882[style="dashed",color="gray",label="next"];
n67879 [shape=box,label="(67879)\n@:cond-branch tmp"];
n67879 -> n67880[style="dashed",color="gray",label="then"];
n67879 -> n67883[style="dashed",color="gray",label="next"];
n67878 [shape=box,label="(67878)\ntmp = false"];
n67877 [shape=box,label="(67877)\ntmp = (cast cast cast cast sourcePixel & 255) != 255"];
n67876 [shape=box,label="(67876)\nvar tmp\nvar tmp = (cast cast cast cast sourcePixel & 255) != 0\n@:cond-branch tmp"];
n67876 -> n67877[style="dashed",color="gray",label="then"];
n67876 -> n67878[style="dashed",color="gray",label="else"];
n67876 -> n67879[style="dashed",color="gray",label="next"];
n67875 [shape=box,label="(67875)\nvar premultiplied = premultiplied\n@:cond-branch premultiplied"];
n67875 -> n67876[style="dashed",color="gray",label="then"];
n67875 -> n67884[style="dashed",color="gray",label="next"];
n67874 [shape=box,label="(67874)\nvar sourcePixel = sourcePosition + 2\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nvar sourcePixel = sourcePixel << 24\nvar sourcePixel = sourcePosition + 1\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nvar sourcePixel = sourcePixel << 16\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = cast cast sourceData[sourcePosition] & 255\nvar sourcePixel = sourcePixel << 8\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = sourcePosition + 3\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nsourcePixel = sourcePixel | sourcePixel"];
n67873 [shape=box,label="(67873)\nvar sourcePixel = sourcePosition + 1\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nvar sourcePixel = sourcePixel << 24\nvar sourcePixel = sourcePosition + 2\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nvar sourcePixel = sourcePixel << 16\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = sourcePosition + 3\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nvar sourcePixel = sourcePixel << 8\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = cast cast sourceData[sourcePosition] & 255\nsourcePixel = sourcePixel | sourcePixel"];
n67872 [shape=box,label="(67872)\nvar sourcePixel = cast cast sourceData[sourcePosition] & 255\nvar sourcePixel = sourcePixel << 24\nvar sourcePixel = sourcePosition + 1\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nvar sourcePixel = sourcePixel << 16\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = sourcePosition + 2\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nvar sourcePixel = sourcePixel << 8\nvar sourcePixel = sourcePixel | sourcePixel\nvar sourcePixel = sourcePosition + 3\nvar sourcePixel = cast cast sourceData[sourcePixel] & 255\nsourcePixel = sourcePixel | sourcePixel"];
n67871 [shape=box,label="(67871)\nvar format = @:exhaustive format\n@:cond-branch format"];
n67871 -> n67872[style="dashed",color="gray",label="case 0"];
n67871 -> n67873[style="dashed",color="gray",label="case 1"];
n67871 -> n67874[style="dashed",color="gray",label="case 2"];
n67871 -> n67875[style="dashed",color="gray",label="next"];
n67870 [shape=box,label="(67870)\nformat = 0"];
n67869 [shape=box,label="(67869)\nvar tmp = format == null\n@:cond-branch tmp"];
n67869 -> n67870[style="dashed",color="gray",label="then"];
n67869 -> n67871[style="dashed",color="gray",label="next"];
n67868 [shape=box,label="(67868)\npremultiplied = false"];
n67867 [shape=box,label="(67867)\nvar format = sourceFormat\nvar premultiplied = sourcePremultiplied\nvar tmp = premultiplied == null\n@:cond-branch tmp"];
n67867 -> n67868[style="dashed",color="gray",label="then"];
n67867 -> n67869[style="dashed",color="gray",label="next"];
n67866 [shape=box,label="(67866)\n` = ` + 1\nvar x = ` - 1"];
n67866 -> n67867[style="dashed",color="gray",label="sub"];
n67866 -> n67885[style="dashed",color="gray",label="next"];
n67865 [shape=box,label="(67865)\nbreak"];
n67864 [shape=box,label="(67864)\nvar tmp = ! ((` < `1))\n@:cond-branch tmp"];
n67864 -> n67865[style="dashed",color="gray",label="then"];
n67864 -> n67866[style="dashed",color="gray",label="next"];
n67863 [shape=box,label="<loop-head>
(67863)"];
n67862 [shape=box,label="(67862)\nwhile ((true)) @:block 67864"];
n67862 -> n67863[style="dashed",color="gray",label="loop-head"];
n67862 -> n67864[style="dashed",color="gray",label="loop-body"];
n67862 -> n67937[style="dashed",color="gray",label="next"];
n67861 [shape=box,label="(67861)\nvar ` = 0\nvar `1 = destView.width"];
n67861 -> n67862[style="dashed",color="gray",label="merge"];
n67860 [shape=box,label="(67860)\n` = ` + 1\nvar y = ` - 1\nvar sourceView = sourceView.byteOffset\nvar sourcePosition = sourceView.stride * y\nsourcePosition = sourceView + sourcePosition\nvar destView = destView.byteOffset\nvar destPosition = destView.stride * y\ndestPosition = destView + destPosition"];
n67860 -> n67861[style="dashed",color="gray",label="sub"];
n67860 -> n67938[style="dashed",color="gray",label="next"];
n67859 [shape=box,label="(67859)\nbreak"];
n67858 [shape=box,label="(67858)\nvar tmp = ! ((` < `1))\n@:cond-branch tmp"];
n67858 -> n67859[style="dashed",color="gray",label="then"];
n67858 -> n67860[style="dashed",color="gray",label="next"];
n67857 [shape=box,label="<loop-head>
(67857)"];
n67856 [shape=box,label="(67856)\nwhile ((true)) @:block 67858"];
n67856 -> n67857[style="dashed",color="gray",label="loop-head"];
n67856 -> n67858[style="dashed",color="gray",label="loop-body"];
n67856 -> n67939[style="dashed",color="gray",label="next"];
n67855 [shape=box,label="(67855)\nvar tmp\nvar tmp\nvar tmp = sourceFormat == destFormat\n@:cond-branch tmp"];
n67855 -> n67940[style="dashed",color="gray",label="then"];
n67855 -> n67941[style="dashed",color="gray",label="else"];
n67855 -> n67942[style="dashed",color="gray",label="next"];
n67854 [shape=box,label="(67854)\nvar ` = 0\nvar `1 = destView.height"];
n67854 -> n67856[style="dashed",color="gray",label="merge"];
n67853 [shape=box,label="(67853)\nvar alphaData = alphaImage.buffer.data\nvar alphaFormat = alphaImage.buffer.format\nvar alphaPosition\nvar alphaPixel\nvar alphaView\nvar alphaView = alphaPoint == null\n@:cond-branch alphaView"];
n67853 -> n68010[style="dashed",color="gray",label="then"];
n67853 -> n68011[style="dashed",color="gray",label="else"];
n67853 -> n68012[style="dashed",color="gray",label="next"];
n67852 [shape=box,label="(67852)\nvar blend = blend\n@:cond-branch blend"];
n67852 -> n67854[style="dashed",color="gray",label="then"];
n67852 -> n67855[style="dashed",color="gray",label="else"];
n67852 -> n68009[style="dashed",color="gray",label="next"];
n67851 [shape=box,label="(67851)\nvar tmp = ! useAlphaImage\n@:cond-branch tmp"];
n67851 -> n67852[style="dashed",color="gray",label="then"];
n67851 -> n67853[style="dashed",color="gray",label="else"];
n67851 -> n68196[style="dashed",color="gray",label="next"];
n67850 [shape=box,label="(67850)"];
n67849 [shape=box,label="(67849)\nblend = false"];
n67848 [shape=box,label="(67848)\nblend = sourceImage.get_transparent()"];
n67847 [shape=box,label="(67847)\n@:cond-branch blend"];
n67847 -> n67848[style="dashed",color="gray",label="then"];
n67847 -> n67849[style="dashed",color="gray",label="else"];
n67847 -> n67850[style="dashed",color="gray",label="next"];
n67846 [shape=box,label="(67846)\nblend = false"];
n67845 [shape=box,label="(67845)\nblend = ! image.get_transparent()"];
n67844 [shape=box,label="(67844)\nblend = true"];
n67843 [shape=box,label="(67843)\nvar blend\nvar blend = ! mergeAlpha\n@:cond-branch blend"];
n67843 -> n67845[style="dashed",color="gray",label="then"];
n67843 -> n67846[style="dashed",color="gray",label="else"];
n67843 -> n67847[style="dashed",color="gray",label="next"];
n67842 [shape=box,label="(67842)\nvar blend = ! blend\n@:cond-branch blend"];
n67842 -> n67843[style="dashed",color="gray",label="then"];
n67842 -> n67844[style="dashed",color="gray",label="else"];
n67842 -> n67851[style="dashed",color="gray",label="next"];
n67841 [shape=box,label="(67841)"];
n67840 [shape=box,label="(67840)\nblend = false"];
n67839 [shape=box,label="(67839)\nblend = ! image.get_transparent()"];
n67838 [shape=box,label="(67838)\nblend = true"];
n67837 [shape=box,label="(67837)\nvar useAlphaImage = useAlphaImage\n@:cond-branch useAlphaImage"];
n67837 -> n67839[style="dashed",color="gray",label="then"];
n67837 -> n67840[style="dashed",color="gray",label="else"];
n67837 -> n67841[style="dashed",color="gray",label="next"];
n67836 [shape=box,label="(67836)\nvar blend\nvar blend\nvar blend = ! mergeAlpha\n@:cond-branch blend"];
n67836 -> n67837[style="dashed",color="gray",label="then"];
n67836 -> n67838[style="dashed",color="gray",label="else"];
n67836 -> n67842[style="dashed",color="gray",label="next"];
n67835 [shape=box,label="(67835)\nuseAlphaImage = false"];
n67834 [shape=box,label="(67834)\nuseAlphaImage = alphaImage.get_transparent()"];
n67833 [shape=box,label="(67833)\nvar sourceView = new lime._internal.graphics._ImageDataUtil.ImageDataView(sourceImage, sourceRect)\nvar destRect = new lime.math.Rectangle(destPoint.x, destPoint.y, sourceView.width, sourceView.height)\nvar destView = new lime._internal.graphics._ImageDataUtil.ImageDataView(image, destRect)\nvar sourceFormat = sourceImage.buffer.format\nvar destFormat = image.buffer.format\nvar sourcePosition\nvar destPosition\nvar sourceAlpha\nvar destAlpha\nvar oneMinusSourceAlpha\nvar blendAlpha\nvar sourcePixel\nvar destPixel\nvar sourcePremultiplied = sourceImage.buffer.premultiplied\nvar destPremultiplied = image.buffer.premultiplied\nvar sourceBytesPerPixel = cast sourceImage.buffer.bitsPerPixel / 8 | 0\nvar destBytesPerPixel = cast image.buffer.bitsPerPixel / 8 | 0\nvar useAlphaImage\nvar useAlphaImage = alphaImage != null\n@:cond-branch useAlphaImage"];
n67833 -> n67834[style="dashed",color="gray",label="then"];
n67833 -> n67835[style="dashed",color="gray",label="else"];
n67833 -> n67836[style="dashed",color="gray",label="next"];
n67832 [shape=box,label="(67832)\nreturn"];
n67831 [shape=box,label="(67831)\n@:cond-branch tmp"];
n67831 -> n67832[style="dashed",color="gray",label="then"];
n67831 -> n67833[style="dashed",color="gray",label="next"];
n67830 [shape=box,label="(67830)\ntmp = true"];
n67829 [shape=box,label="(67829)\ntmp = destData == null"];
n67828 [shape=box,label="(67828)\nvar sourceData = sourceImage.buffer.data\nvar destData = image.buffer.data\nvar tmp\nvar tmp = ! sourceData == null\n@:cond-branch tmp"];
n67828 -> n67829[style="dashed",color="gray",label="then"];
n67828 -> n67830[style="dashed",color="gray",label="else"];
n67828 -> n67831[style="dashed",color="gray",label="next"];
n67827 [shape=box,label="(67827)\nimage.buffer.data.set(sourceImage.buffer.data)"];
n67826 [shape=box,label="(67826)\n@:cond-branch tmp"];
n67826 -> n67827[style="dashed",color="gray",label="then"];
n67826 -> n67828[style="dashed",color="gray",label="else"];
n67826 -> n68197[style="dashed",color="gray",label="next"];
n67825 [shape=box,label="(67825)\ntmp = false"];
n67824 [shape=box,label="(67824)\nvar tmp = image.get_format()\nvar tmp = sourceImage.get_format()\ntmp = tmp == tmp"];
n67823 [shape=box,label="(67823)\n@:cond-branch tmp"];
n67823 -> n67824[style="dashed",color="gray",label="then"];
n67823 -> n67825[style="dashed",color="gray",label="else"];
n67823 -> n67826[style="dashed",color="gray",label="next"];
n67822 [shape=box,label="(67822)\ntmp = false"];
n67821 [shape=box,label="(67821)\ntmp = mergeAlpha == false"];
n67820 [shape=box,label="(67820)\n@:cond-branch tmp"];
n67820 -> n67821[style="dashed",color="gray",label="then"];
n67820 -> n67822[style="dashed",color="gray",label="else"];
n67820 -> n67823[style="dashed",color="gray",label="next"];
n67819 [shape=box,label="(67819)\ntmp = false"];
n67818 [shape=box,label="(67818)\ntmp = alphaPoint == null"];
n67817 [shape=box,label="(67817)\n@:cond-branch tmp"];
n67817 -> n67818[style="dashed",color="gray",label="then"];
n67817 -> n67819[style="dashed",color="gray",label="else"];
n67817 -> n67820[style="dashed",color="gray",label="next"];
n67816 [shape=box,label="(67816)\ntmp = false"];
n67815 [shape=box,label="(67815)\ntmp = alphaImage == null"];
n67814 [shape=box,label="(67814)\n@:cond-branch tmp"];
n67814 -> n67815[style="dashed",color="gray",label="then"];
n67814 -> n67816[style="dashed",color="gray",label="else"];
n67814 -> n67817[style="dashed",color="gray",label="next"];
n67813 [shape=box,label="(67813)\ntmp = false"];
n67812 [shape=box,label="(67812)\ntmp = destPoint.y == 0"];
n67811 [shape=box,label="(67811)\n@:cond-branch tmp"];
n67811 -> n67812[style="dashed",color="gray",label="then"];
n67811 -> n67813[style="dashed",color="gray",label="else"];
n67811 -> n67814[style="dashed",color="gray",label="next"];
n67810 [shape=box,label="(67810)\ntmp = false"];
n67809 [shape=box,label="(67809)\ntmp = destPoint.x == 0"];
n67808 [shape=box,label="(67808)\n@:cond-branch tmp"];
n67808 -> n67809[style="dashed",color="gray",label="then"];
n67808 -> n67810[style="dashed",color="gray",label="else"];
n67808 -> n67811[style="dashed",color="gray",label="next"];
n67807 [shape=box,label="(67807)\ntmp = false"];
n67806 [shape=box,label="(67806)\ntmp = sourceRect.y == 0"];
n67805 [shape=box,label="(67805)\n@:cond-branch tmp"];
n67805 -> n67806[style="dashed",color="gray",label="then"];
n67805 -> n67807[style="dashed",color="gray",label="else"];
n67805 -> n67808[style="dashed",color="gray",label="next"];
n67804 [shape=box,label="(67804)\ntmp = false"];
n67803 [shape=box,label="(67803)\ntmp = sourceRect.x == 0"];
n67802 [shape=box,label="(67802)\n@:cond-branch tmp"];
n67802 -> n67803[style="dashed",color="gray",label="then"];
n67802 -> n67804[style="dashed",color="gray",label="else"];
n67802 -> n67805[style="dashed",color="gray",label="next"];
n67801 [shape=box,label="(67801)\ntmp = false"];
n67800 [shape=box,label="(67800)\ntmp = sourceRect.height == sourceImage.height"];
n67799 [shape=box,label="(67799)\n@:cond-branch tmp"];
n67799 -> n67800[style="dashed",color="gray",label="then"];
n67799 -> n67801[style="dashed",color="gray",label="else"];
n67799 -> n67802[style="dashed",color="gray",label="next"];
n67798 [shape=box,label="(67798)\ntmp = false"];
n67797 [shape=box,label="(67797)\ntmp = sourceRect.width == sourceImage.width"];
n67796 [shape=box,label="(67796)\n@:cond-branch tmp"];
n67796 -> n67797[style="dashed",color="gray",label="then"];
n67796 -> n67798[style="dashed",color="gray",label="else"];
n67796 -> n67799[style="dashed",color="gray",label="next"];
n67795 [shape=box,label="(67795)\ntmp = false"];
n67794 [shape=box,label="(67794)\ntmp = image.height == sourceImage.height"];
n67793 [shape=box,label="<function-end>
(67793)"];
n67792 [shape=box,label="<function-begin>
(67792)\nvar tmp\nvar tmp\nvar tmp\nvar tmp\nvar tmp\nvar tmp\nvar tmp\nvar tmp\nvar tmp\nvar tmp\nvar tmp\nvar tmp = image.width == sourceImage.width\n@:cond-branch tmp"];
n67792 -> n67794[style="dashed",color="gray",label="then"];
n67792 -> n67795[style="dashed",color="gray",label="else"];
n67792 -> n67796[style="dashed",color="gray",label="next"];
n1 [shape=box,label="<root>
(1)"];
}
